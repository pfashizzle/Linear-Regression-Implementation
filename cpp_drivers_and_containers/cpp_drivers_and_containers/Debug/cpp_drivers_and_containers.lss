
cpp_drivers_and_containers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00002544  000025d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002544  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800164  00800164  0000263c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000075c3  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001de6  00000000  00000000  00009f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001896  00000000  00000000  0000bd09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  0000d5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000024cc  00000000  00000000  0000dfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036c7  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00013b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
       4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
       c:	0c 94 b0 04 	jmp	0x960	; 0x960 <__vector_3>
      10:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_4>
      14:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__vector_5>
      18:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_6>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_9>
      28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      2c:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__vector_11>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_16>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
      68:	27 07       	cpc	r18, r23

0000006a <__ctors_end>:
      6a:	2e 07       	cpc	r18, r30

0000006c <__dtors_end>:
      6c:	11 24       	eor	r1, r1
      6e:	1f be       	out	0x3f, r1	; 63
      70:	cf ef       	ldi	r28, 0xFF	; 255
      72:	d8 e0       	ldi	r29, 0x08	; 8
      74:	de bf       	out	0x3e, r29	; 62
      76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
      78:	11 e0       	ldi	r17, 0x01	; 1
      7a:	a0 e0       	ldi	r26, 0x00	; 0
      7c:	b1 e0       	ldi	r27, 0x01	; 1
      7e:	e4 e4       	ldi	r30, 0x44	; 68
      80:	f5 e2       	ldi	r31, 0x25	; 37
      82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
      84:	05 90       	lpm	r0, Z+
      86:	0d 92       	st	X+, r0
      88:	a4 36       	cpi	r26, 0x64	; 100
      8a:	b1 07       	cpc	r27, r17
      8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
      8e:	21 e0       	ldi	r18, 0x01	; 1
      90:	a4 e6       	ldi	r26, 0x64	; 100
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
      96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
      98:	a7 3b       	cpi	r26, 0xB7	; 183
      9a:	b2 07       	cpc	r27, r18
      9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
      9e:	10 e0       	ldi	r17, 0x00	; 0
      a0:	c5 e3       	ldi	r28, 0x35	; 53
      a2:	d0 e0       	ldi	r29, 0x00	; 0
      a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
      a6:	21 97       	sbiw	r28, 0x01	; 1
      a8:	fe 01       	movw	r30, r28
      aa:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__tablejump2__>
      ae:	c4 33       	cpi	r28, 0x34	; 52
      b0:	d1 07       	cpc	r29, r17
      b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
      b4:	0e 94 b2 06 	call	0xd64	; 0xd64 <main>
      b8:	0c 94 95 12 	jmp	0x252a	; 0x252a <__do_global_dtors>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <time>:
      c0:	fc 01       	movw	r30, r24
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	f8 94       	cli
      c6:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <__system_time>
      ca:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <__system_time+0x1>
      ce:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <__system_time+0x2>
      d2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <__system_time+0x3>
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	30 97       	sbiw	r30, 0x00	; 0
      da:	21 f0       	breq	.+8      	; 0xe4 <time+0x24>
      dc:	60 83       	st	Z, r22
      de:	71 83       	std	Z+1, r23	; 0x01
      e0:	82 83       	std	Z+2, r24	; 0x02
      e2:	93 83       	std	Z+3, r25	; 0x03
      e4:	08 95       	ret

000000e6 <_ZN4yrgo6driver3adc4ReadEh>:

static constexpr uint8_t PinAdjustedForOffset(const uint8_t pin) {
    return pin <= Pin::A5 ? pin : pin - kAdcPortOffset;
}

uint16_t Read(const uint8_t pin) {
      e6:	0f 93       	push	r16
namespace adc {

static constexpr uint8_t kAdcPortOffset{14};

static constexpr bool PinNumberValid(const uint8_t pin) {
	return (pin >= Pin::A0 && pin <= Pin::A5) || (pin >= Port::C0 && pin <= Port::C5);
      e8:	86 30       	cpi	r24, 0x06	; 6
      ea:	30 f0       	brcs	.+12     	; 0xf8 <_ZN4yrgo6driver3adc4ReadEh+0x12>
      ec:	92 ef       	ldi	r25, 0xF2	; 242
      ee:	98 0f       	add	r25, r24
      f0:	96 30       	cpi	r25, 0x06	; 6
      f2:	20 f4       	brcc	.+8      	; 0xfc <_ZN4yrgo6driver3adc4ReadEh+0x16>
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	03 c0       	rjmp	.+6      	; 0xfe <_ZN4yrgo6driver3adc4ReadEh+0x18>
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <_ZN4yrgo6driver3adc4ReadEh+0x18>
      fc:	90 e0       	ldi	r25, 0x00	; 0
static constexpr uint8_t PinAdjustedForOffset(const uint8_t pin) {
    return pin <= Pin::A5 ? pin : pin - kAdcPortOffset;
}

uint16_t Read(const uint8_t pin) {
   if (!PinNumberValid(pin)) return 0;
      fe:	99 23       	and	r25, r25
     100:	c9 f1       	breq	.+114    	; 0x174 <_ZN4yrgo6driver3adc4ReadEh+0x8e>
static constexpr bool PinNumberValid(const uint8_t pin) {
	return (pin >= Pin::A0 && pin <= Pin::A5) || (pin >= Port::C0 && pin <= Port::C5);
}

static constexpr uint8_t PinAdjustedForOffset(const uint8_t pin) {
    return pin <= Pin::A5 ? pin : pin - kAdcPortOffset;
     102:	86 30       	cpi	r24, 0x06	; 6
     104:	08 f0       	brcs	.+2      	; 0x108 <_ZN4yrgo6driver3adc4ReadEh+0x22>
     106:	8e 50       	subi	r24, 0x0E	; 14
}

uint16_t Read(const uint8_t pin) {
   if (!PinNumberValid(pin)) return 0;
   ADMUX = (1 << REFS0) | PinAdjustedForOffset(pin);
     108:	80 64       	ori	r24, 0x40	; 64
     10a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 *        The specified bit to set.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Set(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
	reg |= (1ULL << bit);
     10e:	ea e7       	ldi	r30, 0x7A	; 122
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	80 68       	ori	r24, 0x80	; 128
     116:	80 83       	st	Z, r24
     118:	80 81       	ld	r24, Z
     11a:	80 64       	ori	r24, 0x40	; 64
     11c:	80 83       	st	Z, r24
     11e:	80 81       	ld	r24, Z
     120:	81 60       	ori	r24, 0x01	; 1
     122:	80 83       	st	Z, r24
     124:	80 81       	ld	r24, Z
     126:	82 60       	ori	r24, 0x02	; 2
     128:	80 83       	st	Z, r24
     12a:	80 81       	ld	r24, Z
     12c:	84 60       	ori	r24, 0x04	; 4
     12e:	80 83       	st	Z, r24
 *        True if the specified bit is high, else false.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr bool Read(const volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
    return reg & (1ULL << bit);
     130:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	04 e0       	ldi	r16, 0x04	; 4
     144:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
     148:	21 70       	andi	r18, 0x01	; 1
   utils::Set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
   while (!utils::Read(ADCSRA, ADIF));
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	70 e0       	ldi	r23, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__cmpdi2_s8>
     15e:	41 f3       	breq	.-48     	; 0x130 <_ZN4yrgo6driver3adc4ReadEh+0x4a>
 *        The specified bit to set.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Set(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
	reg |= (1ULL << bit);
     160:	ea e7       	ldi	r30, 0x7A	; 122
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	80 61       	ori	r24, 0x10	; 16
     168:	80 83       	st	Z, r24
   utils::Set(ADCSRA, ADIF);
   return ADC;
     16a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     16e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     172:	02 c0       	rjmp	.+4      	; 0x178 <_ZN4yrgo6driver3adc4ReadEh+0x92>
static constexpr uint8_t PinAdjustedForOffset(const uint8_t pin) {
    return pin <= Pin::A5 ? pin : pin - kAdcPortOffset;
}

uint16_t Read(const uint8_t pin) {
   if (!PinNumberValid(pin)) return 0;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
   ADMUX = (1 << REFS0) | PinAdjustedForOffset(pin);
   utils::Set(ADCSRA, ADEN, ADSC, ADPS0, ADPS1, ADPS2);
   while (!utils::Read(ADCSRA, ADIF));
   utils::Set(ADCSRA, ADIF);
   return ADC;
}
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <_ZN4yrgo6LinReg22RandomizeTrainingOrderEv>:
 *        2. We generate a random index between 0 - train_order.Size() - 1.
 *           For instance, if the training order vector has five elements, we
 *           generate a random number between 0 - 4.
 *        3. We swap the values of index i and r in the vector.
 ********************************************************************************/
void LinReg::RandomizeTrainingOrder(void) {
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	8c 01       	movw	r16, r24
    for (size_t i{}; i < train_order_.Size(); ++i) {
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	d0 e0       	ldi	r29, 0x00	; 0
     *
     * @return
     *        The size of the vector as the number of elements it can hold.
     ********************************************************************************/
    size_t Size(void) const noexcept {
        return size_;
     18a:	f8 01       	movw	r30, r16
     18c:	82 85       	ldd	r24, Z+10	; 0x0a
     18e:	93 85       	ldd	r25, Z+11	; 0x0b
     190:	c8 17       	cp	r28, r24
     192:	d9 07       	cpc	r29, r25
     194:	18 f5       	brcc	.+70     	; 0x1dc <_ZN4yrgo6LinReg22RandomizeTrainingOrderEv+0x60>
        const auto r{rand() % train_order_.Size()}; 
     196:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <rand>
     19a:	f8 01       	movw	r30, r16
     19c:	62 85       	ldd	r22, Z+10	; 0x0a
     19e:	73 85       	ldd	r23, Z+11	; 0x0b
     1a0:	0e 94 9f 0c 	call	0x193e	; 0x193e <__udivmodhi4>
     *        Index to searched element.
     * @return
     *        A reference to the element at specified index.
     ********************************************************************************/
    T& operator[](const size_t index) noexcept {
        return data_[index];
     1a4:	20 85       	ldd	r18, Z+8	; 0x08
     1a6:	31 85       	ldd	r19, Z+9	; 0x09
     1a8:	fe 01       	movw	r30, r28
     1aa:	ee 0f       	add	r30, r30
     1ac:	ff 1f       	adc	r31, r31
     1ae:	e2 0f       	add	r30, r18
     1b0:	f3 1f       	adc	r31, r19
        const auto temp{train_order_[i]};
     1b2:	40 81       	ld	r20, Z
     1b4:	51 81       	ldd	r21, Z+1	; 0x01
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	d9 01       	movw	r26, r18
     1bc:	a8 0f       	add	r26, r24
     1be:	b9 1f       	adc	r27, r25
        train_order_[i] = train_order_[r];
     1c0:	2d 91       	ld	r18, X+
     1c2:	3c 91       	ld	r19, X
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
     1c8:	f8 01       	movw	r30, r16
     1ca:	20 85       	ldd	r18, Z+8	; 0x08
     1cc:	31 85       	ldd	r19, Z+9	; 0x09
     1ce:	f9 01       	movw	r30, r18
     1d0:	e8 0f       	add	r30, r24
     1d2:	f9 1f       	adc	r31, r25
        train_order_[r] = temp;
     1d4:	51 83       	std	Z+1, r21	; 0x01
     1d6:	40 83       	st	Z, r20
 *           For instance, if the training order vector has five elements, we
 *           generate a random number between 0 - 4.
 *        3. We swap the values of index i and r in the vector.
 ********************************************************************************/
void LinReg::RandomizeTrainingOrder(void) {
    for (size_t i{}; i < train_order_.Size(); ++i) {
     1d8:	21 96       	adiw	r28, 0x01	; 1
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <_ZN4yrgo6LinReg22RandomizeTrainingOrderEv+0xe>
        const auto r{rand() % train_order_.Size()}; 
        const auto temp{train_order_[i]};
        train_order_[i] = train_order_[r];
        train_order_[r] = temp;
    }
}
     1dc:	df 91       	pop	r29
     1de:	cf 91       	pop	r28
     1e0:	1f 91       	pop	r17
     1e2:	0f 91       	pop	r16
     1e4:	08 95       	ret

000001e6 <_ZN4yrgo6LinReg8OptimizeEddd>:
 *        1. If input != 0, we predict with the input and optimize according
 *           to the error.
 *        2. Else, we set the bias to the y_ref value, since y = m if x = 0.
 *           (y = kx + m = k * 0 + 0 => y = m when k = 0).
 ********************************************************************************/
void LinReg::Optimize(const double input, const double reference, const double learning_rate) {
     1e6:	4f 92       	push	r4
     1e8:	5f 92       	push	r5
     1ea:	6f 92       	push	r6
     1ec:	7f 92       	push	r7
     1ee:	8f 92       	push	r8
     1f0:	9f 92       	push	r9
     1f2:	af 92       	push	r10
     1f4:	bf 92       	push	r11
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	2a 97       	sbiw	r28, 0x0a	; 10
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	9a 87       	std	Y+10, r25	; 0x0a
     218:	89 87       	std	Y+9, r24	; 0x09
     21a:	49 83       	std	Y+1, r20	; 0x01
     21c:	5a 83       	std	Y+2, r21	; 0x02
     21e:	6b 83       	std	Y+3, r22	; 0x03
     220:	7c 83       	std	Y+4, r23	; 0x04
     222:	28 01       	movw	r4, r16
     224:	39 01       	movw	r6, r18
    if (input != 0) {
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	a9 01       	movw	r20, r18
     22c:	69 81       	ldd	r22, Y+1	; 0x01
     22e:	7a 81       	ldd	r23, Y+2	; 0x02
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__cmpsf2>
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <_ZN4yrgo6LinReg8OptimizeEddd+0x58>
     23c:	47 c0       	rjmp	.+142    	; 0x2cc <_ZN4yrgo6LinReg8OptimizeEddd+0xe6>
     * @param input
     *        The input value (x) to predict with.
     * @return
     *        The predicted value (y_pred).
     ********************************************************************************/
    double Predict(const double input) const { return weight_ * input + bias_; }
     23e:	e9 85       	ldd	r30, Y+9	; 0x09
     240:	fa 85       	ldd	r31, Y+10	; 0x0a
     242:	84 84       	ldd	r8, Z+12	; 0x0c
     244:	95 84       	ldd	r9, Z+13	; 0x0d
     246:	a6 84       	ldd	r10, Z+14	; 0x0e
     248:	b7 84       	ldd	r11, Z+15	; 0x0f
     24a:	a5 01       	movw	r20, r10
     24c:	94 01       	movw	r18, r8
     24e:	69 81       	ldd	r22, Y+1	; 0x01
     250:	7a 81       	ldd	r23, Y+2	; 0x02
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
     25a:	e9 85       	ldd	r30, Y+9	; 0x09
     25c:	fa 85       	ldd	r31, Y+10	; 0x0a
     25e:	20 89       	ldd	r18, Z+16	; 0x10
     260:	31 89       	ldd	r19, Z+17	; 0x11
     262:	42 89       	ldd	r20, Z+18	; 0x12
     264:	53 89       	ldd	r21, Z+19	; 0x13
     266:	2d 83       	std	Y+5, r18	; 0x05
     268:	3e 83       	std	Y+6, r19	; 0x06
     26a:	4f 83       	std	Y+7, r20	; 0x07
     26c:	58 87       	std	Y+8, r21	; 0x08
     26e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     272:	9b 01       	movw	r18, r22
     274:	ac 01       	movw	r20, r24
        const auto error{reference - Predict(input)}; /* error = y_ref - y_pred */
     276:	c3 01       	movw	r24, r6
     278:	b2 01       	movw	r22, r4
     27a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__subsf3>
        bias_ += error * learning_rate;               /* m = m + error * LR */
     27e:	a7 01       	movw	r20, r14
     280:	96 01       	movw	r18, r12
     282:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
     286:	6b 01       	movw	r12, r22
     288:	7c 01       	movw	r14, r24
     28a:	2d 81       	ldd	r18, Y+5	; 0x05
     28c:	3e 81       	ldd	r19, Y+6	; 0x06
     28e:	4f 81       	ldd	r20, Y+7	; 0x07
     290:	58 85       	ldd	r21, Y+8	; 0x08
     292:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     296:	e9 85       	ldd	r30, Y+9	; 0x09
     298:	fa 85       	ldd	r31, Y+10	; 0x0a
     29a:	60 8b       	std	Z+16, r22	; 0x10
     29c:	71 8b       	std	Z+17, r23	; 0x11
     29e:	82 8b       	std	Z+18, r24	; 0x12
     2a0:	93 8b       	std	Z+19, r25	; 0x13
        weight_ += error * learning_rate * input;     /* k = k + error * LR * x */
     2a2:	a7 01       	movw	r20, r14
     2a4:	96 01       	movw	r18, r12
     2a6:	69 81       	ldd	r22, Y+1	; 0x01
     2a8:	7a 81       	ldd	r23, Y+2	; 0x02
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	9c 81       	ldd	r25, Y+4	; 0x04
     2ae:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
     2b2:	9b 01       	movw	r18, r22
     2b4:	ac 01       	movw	r20, r24
     2b6:	c5 01       	movw	r24, r10
     2b8:	b4 01       	movw	r22, r8
     2ba:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     2be:	e9 85       	ldd	r30, Y+9	; 0x09
     2c0:	fa 85       	ldd	r31, Y+10	; 0x0a
     2c2:	64 87       	std	Z+12, r22	; 0x0c
     2c4:	75 87       	std	Z+13, r23	; 0x0d
     2c6:	86 87       	std	Z+14, r24	; 0x0e
     2c8:	97 87       	std	Z+15, r25	; 0x0f
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <_ZN4yrgo6LinReg8OptimizeEddd+0xf2>
    } else {
        bias_ = reference;                            /* m = y_ref when x = 0 */
     2cc:	e9 85       	ldd	r30, Y+9	; 0x09
     2ce:	fa 85       	ldd	r31, Y+10	; 0x0a
     2d0:	40 8a       	std	Z+16, r4	; 0x10
     2d2:	51 8a       	std	Z+17, r5	; 0x11
     2d4:	62 8a       	std	Z+18, r6	; 0x12
     2d6:	73 8a       	std	Z+19, r7	; 0x13
    }
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	08 95       	ret

00000306 <_ZN4yrgo6LinReg5TrainEjd>:
 *        1. A loop is generated to run num_epochs number of times.
 *        2. The training order is randomized before the training begins.
 *        3. We train the model with all the training sets one by one.
 *        4. We fetch the index of the training set and optimize out model.
 ********************************************************************************/
void LinReg::Train(const size_t num_epochs, const double learning_rate) {
     306:	4f 92       	push	r4
     308:	5f 92       	push	r5
     30a:	6f 92       	push	r6
     30c:	7f 92       	push	r7
     30e:	8f 92       	push	r8
     310:	9f 92       	push	r9
     312:	af 92       	push	r10
     314:	bf 92       	push	r11
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <_ZN4yrgo6LinReg5TrainEjd+0x22>
     328:	00 d0       	rcall	.+0      	; 0x32a <_ZN4yrgo6LinReg5TrainEjd+0x24>
     32a:	00 d0       	rcall	.+0      	; 0x32c <_ZN4yrgo6LinReg5TrainEjd+0x26>
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	9e 83       	std	Y+6, r25	; 0x06
     332:	8d 83       	std	Y+5, r24	; 0x05
     334:	2b 01       	movw	r4, r22
     336:	29 83       	std	Y+1, r18	; 0x01
     338:	3a 83       	std	Y+2, r19	; 0x02
     33a:	4b 83       	std	Y+3, r20	; 0x03
     33c:	5c 83       	std	Y+4, r21	; 0x04
    for (size_t i{}; i < num_epochs; ++i) {
     33e:	61 2c       	mov	r6, r1
     340:	71 2c       	mov	r7, r1
     342:	64 14       	cp	r6, r4
     344:	75 04       	cpc	r7, r5
     346:	08 f0       	brcs	.+2      	; 0x34a <_ZN4yrgo6LinReg5TrainEjd+0x44>
     348:	3f c0       	rjmp	.+126    	; 0x3c8 <_ZN4yrgo6LinReg5TrainEjd+0xc2>
        RandomizeTrainingOrder();
     34a:	8d 81       	ldd	r24, Y+5	; 0x05
     34c:	9e 81       	ldd	r25, Y+6	; 0x06
     34e:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN4yrgo6LinReg22RandomizeTrainingOrderEv>
     * @brief Returns the start address of referenced vector.
     *
     * @return
     *        A pointer to the first element of referenced vector.
     ********************************************************************************/
    T* begin(void) noexcept { return data_; }
     352:	ad 81       	ldd	r26, Y+5	; 0x05
     354:	be 81       	ldd	r27, Y+6	; 0x06
     356:	18 96       	adiw	r26, 0x08	; 8
     358:	ad 90       	ld	r10, X+
     35a:	bc 90       	ld	r11, X
     35c:	19 97       	sbiw	r26, 0x09	; 9
     * @brief Returns the end address of referenced vector.
     *
     * @return
     *        A pointer to the address after the last element of referenced vector.
     ********************************************************************************/
    T* end(void) noexcept { return data_ + size_; }
     35e:	1a 96       	adiw	r26, 0x0a	; 10
     360:	8d 90       	ld	r8, X+
     362:	9c 90       	ld	r9, X
     364:	1b 97       	sbiw	r26, 0x0b	; 11
     366:	88 0c       	add	r8, r8
     368:	99 1c       	adc	r9, r9
     36a:	8a 0c       	add	r8, r10
     36c:	9b 1c       	adc	r9, r11
        for (auto& j : train_order_) { 
     36e:	a8 14       	cp	r10, r8
     370:	b9 04       	cpc	r11, r9
     372:	31 f1       	breq	.+76     	; 0x3c0 <_ZN4yrgo6LinReg5TrainEjd+0xba>
            Optimize(train_in_[j], train_out_[j], learning_rate);
     374:	f5 01       	movw	r30, r10
     376:	81 91       	ld	r24, Z+
     378:	91 91       	ld	r25, Z+
     37a:	5f 01       	movw	r10, r30
     *        Index to searched element.
     * @return
     *        A reference to the element at specified index.
     ********************************************************************************/
    T& operator[](const size_t index) noexcept {
        return data_[index];
     37c:	ad 81       	ldd	r26, Y+5	; 0x05
     37e:	be 81       	ldd	r27, Y+6	; 0x06
     380:	14 96       	adiw	r26, 0x04	; 4
     382:	ed 91       	ld	r30, X+
     384:	fc 91       	ld	r31, X
     386:	15 97       	sbiw	r26, 0x05	; 5
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	e8 0f       	add	r30, r24
     392:	f9 1f       	adc	r31, r25
     394:	00 81       	ld	r16, Z
     396:	11 81       	ldd	r17, Z+1	; 0x01
     398:	22 81       	ldd	r18, Z+2	; 0x02
     39a:	33 81       	ldd	r19, Z+3	; 0x03
     39c:	4d 91       	ld	r20, X+
     39e:	5c 91       	ld	r21, X
     3a0:	11 97       	sbiw	r26, 0x01	; 1
     3a2:	fa 01       	movw	r30, r20
     3a4:	e8 0f       	add	r30, r24
     3a6:	f9 1f       	adc	r31, r25
     3a8:	40 81       	ld	r20, Z
     3aa:	51 81       	ldd	r21, Z+1	; 0x01
     3ac:	62 81       	ldd	r22, Z+2	; 0x02
     3ae:	73 81       	ldd	r23, Z+3	; 0x03
     3b0:	c9 80       	ldd	r12, Y+1	; 0x01
     3b2:	da 80       	ldd	r13, Y+2	; 0x02
     3b4:	eb 80       	ldd	r14, Y+3	; 0x03
     3b6:	fc 80       	ldd	r15, Y+4	; 0x04
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_ZN4yrgo6LinReg8OptimizeEddd>
 *        4. We fetch the index of the training set and optimize out model.
 ********************************************************************************/
void LinReg::Train(const size_t num_epochs, const double learning_rate) {
    for (size_t i{}; i < num_epochs; ++i) {
        RandomizeTrainingOrder();
        for (auto& j : train_order_) { 
     3be:	d7 cf       	rjmp	.-82     	; 0x36e <_ZN4yrgo6LinReg5TrainEjd+0x68>
 *        2. The training order is randomized before the training begins.
 *        3. We train the model with all the training sets one by one.
 *        4. We fetch the index of the training set and optimize out model.
 ********************************************************************************/
void LinReg::Train(const size_t num_epochs, const double learning_rate) {
    for (size_t i{}; i < num_epochs; ++i) {
     3c0:	bf ef       	ldi	r27, 0xFF	; 255
     3c2:	6b 1a       	sub	r6, r27
     3c4:	7b 0a       	sbc	r7, r27
     3c6:	bd cf       	rjmp	.-134    	; 0x342 <_ZN4yrgo6LinReg5TrainEjd+0x3c>
        RandomizeTrainingOrder();
        for (auto& j : train_order_) { 
            Optimize(train_in_[j], train_out_[j], learning_rate);
        }
    }
}
     3c8:	26 96       	adiw	r28, 0x06	; 6
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	9f 90       	pop	r9
     3ea:	8f 90       	pop	r8
     3ec:	7f 90       	pop	r7
     3ee:	6f 90       	pop	r6
     3f0:	5f 90       	pop	r5
     3f2:	4f 90       	pop	r4
     3f4:	08 95       	ret

000003f6 <_ZN4yrgo6LinReg17MatchTrainingSetsEv>:
 *        1. If the number of input and reference values don't match, i.e. the
 *           size of the train_in_ and train_out_ vectors don't match, the
 *           superfluous values are removed by resizing the larger vector to the
 *           size of the smaller one.
 ********************************************************************************/
void LinReg::MatchTrainingSets(void) {
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
     *
     * @return
     *        The size of the vector as the number of elements it can hold.
     ********************************************************************************/
    size_t Size(void) const noexcept {
        return size_;
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	9b 81       	ldd	r25, Y+3	; 0x03
     408:	0e 81       	ldd	r16, Y+6	; 0x06
     40a:	1f 81       	ldd	r17, Y+7	; 0x07
    if (train_in_.Size() != train_out_.Size()) {
     40c:	80 17       	cp	r24, r16
     40e:	91 07       	cpc	r25, r17
     410:	f9 f0       	breq	.+62     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
        const auto num_sets{train_in_.Size() < train_out_.Size() ? 
                            train_in_.Size() : train_out_.Size()};
     412:	80 17       	cp	r24, r16
     414:	91 07       	cpc	r25, r17
     416:	08 f4       	brcc	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     418:	8c 01       	movw	r16, r24
 * @return
 *        A pointer to the resized block at success, else a null pointer.
 ********************************************************************************/
template <typename T>
inline T* Resize(T* block, const size_t new_size) {
    return static_cast<T*>(realloc(block, sizeof(T) * new_size));
     41a:	78 01       	movw	r14, r16
     41c:	ee 0c       	add	r14, r14
     41e:	ff 1c       	adc	r15, r15
     420:	ee 0c       	add	r14, r14
     422:	ff 1c       	adc	r15, r15
     424:	b7 01       	movw	r22, r14
     426:	88 81       	ld	r24, Y
     428:	99 81       	ldd	r25, Y+1	; 0x01
     42a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	21 f0       	breq	.+8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
        data_ = copy;
     432:	99 83       	std	Y+1, r25	; 0x01
     434:	88 83       	st	Y, r24
        size_ = new_size;
     436:	1b 83       	std	Y+3, r17	; 0x03
     438:	0a 83       	std	Y+2, r16	; 0x02
     43a:	b7 01       	movw	r22, r14
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     444:	00 97       	sbiw	r24, 0x00	; 0
     446:	21 f0       	breq	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
        data_ = copy;
     448:	9d 83       	std	Y+5, r25	; 0x05
     44a:	8c 83       	std	Y+4, r24	; 0x04
        size_ = new_size;
     44c:	1f 83       	std	Y+7, r17	; 0x07
     44e:	0e 83       	std	Y+6, r16	; 0x06
        train_in_.Resize(num_sets);
        train_out_.Resize(num_sets);
    }
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	08 95       	ret

0000045e <_ZN4yrgo6LinReg20InitTrainOrderVectorEv>:
 *        1. The size of the train order vector is set to the number of stored
 *           training sets.
 *        2. The vector is assigned the index of each stored training set, e.g.
 *           0 - 9 if ten training sets are stored.
 ********************************************************************************/
void LinReg::InitTrainOrderVector(void) {
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
     *
     * @return
     *        The size of the vector as the number of elements it can hold.
     ********************************************************************************/
    size_t Size(void) const noexcept {
        return size_;
     468:	0a 81       	ldd	r16, Y+2	; 0x02
     46a:	1b 81       	ldd	r17, Y+3	; 0x03
     46c:	b8 01       	movw	r22, r16
     46e:	66 0f       	add	r22, r22
     470:	77 1f       	adc	r23, r23
     472:	88 85       	ldd	r24, Y+8	; 0x08
     474:	99 85       	ldd	r25, Y+9	; 0x09
     476:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	21 f0       	breq	.+8      	; 0x486 <_ZN4yrgo6LinReg20InitTrainOrderVectorEv+0x28>
        data_ = copy;
     47e:	99 87       	std	Y+9, r25	; 0x09
     480:	88 87       	std	Y+8, r24	; 0x08
        size_ = new_size;
     482:	1b 87       	std	Y+11, r17	; 0x0b
     484:	0a 87       	std	Y+10, r16	; 0x0a
    train_order_.Resize(train_in_.Size());
    for (size_t i{}; i < train_order_.Size(); ++i) {
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     *
     * @return
     *        The size of the vector as the number of elements it can hold.
     ********************************************************************************/
    size_t Size(void) const noexcept {
        return size_;
     48a:	2a 85       	ldd	r18, Y+10	; 0x0a
     48c:	3b 85       	ldd	r19, Y+11	; 0x0b
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	58 f4       	brcc	.+22     	; 0x4aa <_ZN4yrgo6LinReg20InitTrainOrderVectorEv+0x4c>
     *        Index to searched element.
     * @return
     *        A reference to the element at specified index.
     ********************************************************************************/
    T& operator[](const size_t index) noexcept {
        return data_[index];
     494:	e8 85       	ldd	r30, Y+8	; 0x08
     496:	f9 85       	ldd	r31, Y+9	; 0x09
     498:	9c 01       	movw	r18, r24
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	e2 0f       	add	r30, r18
     4a0:	f3 1f       	adc	r31, r19
        train_order_[i] = i;
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
 *        2. The vector is assigned the index of each stored training set, e.g.
 *           0 - 9 if ten training sets are stored.
 ********************************************************************************/
void LinReg::InitTrainOrderVector(void) {
    train_order_.Resize(train_in_.Size());
    for (size_t i{}; i < train_order_.Size(); ++i) {
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	f0 cf       	rjmp	.-32     	; 0x48a <_ZN4yrgo6LinReg20InitTrainOrderVectorEv+0x2c>
        train_order_[i] = i;
    }
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <_ZN4yrgo6LinReg19InitRandomGeneratorEv>:
 *        2. The vector is assigned the index of each stored training set, e.g.
 *           0 - 9 if ten training sets are stored.
 ********************************************************************************/
void LinReg::InitRandomGenerator(void) {
    static bool random_generator_initialized{false};
    if (!random_generator_initialized) {
     4b4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
     4b8:	81 11       	cpse	r24, r1
     4ba:	0a c0       	rjmp	.+20     	; 0x4d0 <_ZN4yrgo6LinReg19InitRandomGeneratorEv+0x1c>
        srand(time(nullptr));
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 60 00 	call	0xc0	; 0xc0 <time>
     4c4:	cb 01       	movw	r24, r22
     4c6:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <srand>
        random_generator_initialized = true;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>
     4d0:	08 95       	ret

000004d2 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_>:
 *        3. The index of each training set is stored in the train order vector.
 *        4. The random generator is initializes to ensure that the randomized
 *           sequence is unique each time the program is run.
 ********************************************************************************/
void LinReg::LoadTrainingData(const container::Vector<double>& train_in, 
                              const container::Vector<double>& train_out) {
     4d2:	af 92       	push	r10
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
     4e8:	7b 01       	movw	r14, r22
     4ea:	8a 01       	movw	r16, r20
    train_in_ = train_in; 
     4ec:	6c 01       	movw	r12, r24
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     4ee:	88 81       	ld	r24, Y
     4f0:	99 81       	ldd	r25, Y+1	; 0x01
     4f2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     4f6:	19 82       	std	Y+1, r1	; 0x01
     4f8:	18 82       	st	Y, r1
     * @brief Clears content of referenced vector by deallocating memory on the
     *        heap. All member variables are reset to starting values.
     ********************************************************************************/
    void Clear(void) noexcept {
        detail::Delete<T>(data_);
        size_ = 0;
     4fa:	1b 82       	std	Y+3, r1	; 0x03
     4fc:	1a 82       	std	Y+2, r1	; 0x02
     *        Reference to vector whose content is copied.
     * @return
     *        True if the content of the source vector was copied, else false.
     ********************************************************************************/
    bool Copy(const Vector& source) noexcept {
        if (Resize(source.size_)) {
     4fe:	d7 01       	movw	r26, r14
     500:	12 96       	adiw	r26, 0x02	; 2
     502:	ad 90       	ld	r10, X+
     504:	bc 90       	ld	r11, X
     506:	13 97       	sbiw	r26, 0x03	; 3
 * @return
 *        A pointer to the resized block at success, else a null pointer.
 ********************************************************************************/
template <typename T>
inline T* Resize(T* block, const size_t new_size) {
    return static_cast<T*>(realloc(block, sizeof(T) * new_size));
     508:	b5 01       	movw	r22, r10
     50a:	66 0f       	add	r22, r22
     50c:	77 1f       	adc	r23, r23
     50e:	66 0f       	add	r22, r22
     510:	77 1f       	adc	r23, r23
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     51a:	00 97       	sbiw	r24, 0x00	; 0
     51c:	31 f0       	breq	.+12     	; 0x52a <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x58>
        data_ = copy;
     51e:	99 83       	std	Y+1, r25	; 0x01
     520:	88 83       	st	Y, r24
        size_ = new_size;
     522:	bb 82       	std	Y+3, r11	; 0x03
     524:	aa 82       	std	Y+2, r10	; 0x02
        return true;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	01 c0       	rjmp	.+2      	; 0x52c <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x5a>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     *        Reference to vector whose content is copied.
     * @return
     *        True if the content of the source vector was copied, else false.
     ********************************************************************************/
    bool Copy(const Vector& source) noexcept {
        if (Resize(source.size_)) {
     52c:	88 23       	and	r24, r24
     52e:	49 f1       	breq	.+82     	; 0x582 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0xb0>
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     *        Reference to vector containing values to assign.
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    void Assign(const Vector& source, const size_t offset = 0) noexcept {
        for (size_t i{}; offset + i < size_ && i < source.size_; ++i) {
     534:	f6 01       	movw	r30, r12
     536:	22 81       	ldd	r18, Z+2	; 0x02
     538:	33 81       	ldd	r19, Z+3	; 0x03
     53a:	82 17       	cp	r24, r18
     53c:	93 07       	cpc	r25, r19
     53e:	08 f5       	brcc	.+66     	; 0x582 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0xb0>
     540:	d7 01       	movw	r26, r14
     542:	12 96       	adiw	r26, 0x02	; 2
     544:	2d 91       	ld	r18, X+
     546:	3c 91       	ld	r19, X
     548:	13 97       	sbiw	r26, 0x03	; 3
     54a:	82 17       	cp	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	c8 f4       	brcc	.+50     	; 0x582 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0xb0>
            data_[offset + i] = source.data_[i];
     550:	9c 01       	movw	r18, r24
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	e2 0f       	add	r30, r18
     562:	f3 1f       	adc	r31, r19
     564:	4d 91       	ld	r20, X+
     566:	5c 91       	ld	r21, X
     568:	da 01       	movw	r26, r20
     56a:	a2 0f       	add	r26, r18
     56c:	b3 1f       	adc	r27, r19
     56e:	4d 91       	ld	r20, X+
     570:	5d 91       	ld	r21, X+
     572:	6d 91       	ld	r22, X+
     574:	7c 91       	ld	r23, X
     576:	40 83       	st	Z, r20
     578:	51 83       	std	Z+1, r21	; 0x01
     57a:	62 83       	std	Z+2, r22	; 0x02
     57c:	73 83       	std	Z+3, r23	; 0x03
     *        Reference to vector containing values to assign.
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    void Assign(const Vector& source, const size_t offset = 0) noexcept {
        for (size_t i{}; offset + i < size_ && i < source.size_; ++i) {
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	d9 cf       	rjmp	.-78     	; 0x534 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x62>
    train_out_ = train_out;
     582:	7e 01       	movw	r14, r28
     584:	b4 e0       	ldi	r27, 0x04	; 4
     586:	eb 0e       	add	r14, r27
     588:	f1 1c       	adc	r15, r1
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     58a:	8c 81       	ldd	r24, Y+4	; 0x04
     58c:	9d 81       	ldd	r25, Y+5	; 0x05
     58e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     592:	1d 82       	std	Y+5, r1	; 0x05
     594:	1c 82       	std	Y+4, r1	; 0x04
     * @brief Clears content of referenced vector by deallocating memory on the
     *        heap. All member variables are reset to starting values.
     ********************************************************************************/
    void Clear(void) noexcept {
        detail::Delete<T>(data_);
        size_ = 0;
     596:	1f 82       	std	Y+7, r1	; 0x07
     598:	1e 82       	std	Y+6, r1	; 0x06
     *        Reference to vector whose content is copied.
     * @return
     *        True if the content of the source vector was copied, else false.
     ********************************************************************************/
    bool Copy(const Vector& source) noexcept {
        if (Resize(source.size_)) {
     59a:	f8 01       	movw	r30, r16
     59c:	c2 80       	ldd	r12, Z+2	; 0x02
     59e:	d3 80       	ldd	r13, Z+3	; 0x03
 * @return
 *        A pointer to the resized block at success, else a null pointer.
 ********************************************************************************/
template <typename T>
inline T* Resize(T* block, const size_t new_size) {
    return static_cast<T*>(realloc(block, sizeof(T) * new_size));
     5a0:	b6 01       	movw	r22, r12
     5a2:	66 0f       	add	r22, r22
     5a4:	77 1f       	adc	r23, r23
     5a6:	66 0f       	add	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	49 f0       	breq	.+18     	; 0x5c8 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0xf6>
        data_ = copy;
     5b6:	9d 83       	std	Y+5, r25	; 0x05
     5b8:	8c 83       	std	Y+4, r24	; 0x04
        size_ = new_size;
     5ba:	d7 01       	movw	r26, r14
     5bc:	13 96       	adiw	r26, 0x03	; 3
     5be:	dc 92       	st	X, r13
     5c0:	ce 92       	st	-X, r12
     5c2:	12 97       	sbiw	r26, 0x02	; 2
        return true;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0xf8>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     *        Reference to vector whose content is copied.
     * @return
     *        True if the content of the source vector was copied, else false.
     ********************************************************************************/
    bool Copy(const Vector& source) noexcept {
        if (Resize(source.size_)) {
     5ca:	88 23       	and	r24, r24
     5cc:	49 f1       	breq	.+82     	; 0x620 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x14e>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     *        Reference to vector containing values to assign.
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    void Assign(const Vector& source, const size_t offset = 0) noexcept {
        for (size_t i{}; offset + i < size_ && i < source.size_; ++i) {
     5d2:	f7 01       	movw	r30, r14
     5d4:	22 81       	ldd	r18, Z+2	; 0x02
     5d6:	33 81       	ldd	r19, Z+3	; 0x03
     5d8:	82 17       	cp	r24, r18
     5da:	93 07       	cpc	r25, r19
     5dc:	08 f5       	brcc	.+66     	; 0x620 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x14e>
     5de:	d8 01       	movw	r26, r16
     5e0:	12 96       	adiw	r26, 0x02	; 2
     5e2:	2d 91       	ld	r18, X+
     5e4:	3c 91       	ld	r19, X
     5e6:	13 97       	sbiw	r26, 0x03	; 3
     5e8:	82 17       	cp	r24, r18
     5ea:	93 07       	cpc	r25, r19
     5ec:	c8 f4       	brcc	.+50     	; 0x620 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x14e>
            data_[offset + i] = source.data_[i];
     5ee:	9c 01       	movw	r18, r24
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	01 90       	ld	r0, Z+
     5fa:	f0 81       	ld	r31, Z
     5fc:	e0 2d       	mov	r30, r0
     5fe:	e2 0f       	add	r30, r18
     600:	f3 1f       	adc	r31, r19
     602:	4d 91       	ld	r20, X+
     604:	5c 91       	ld	r21, X
     606:	da 01       	movw	r26, r20
     608:	a2 0f       	add	r26, r18
     60a:	b3 1f       	adc	r27, r19
     60c:	4d 91       	ld	r20, X+
     60e:	5d 91       	ld	r21, X+
     610:	6d 91       	ld	r22, X+
     612:	7c 91       	ld	r23, X
     614:	40 83       	st	Z, r20
     616:	51 83       	std	Z+1, r21	; 0x01
     618:	62 83       	std	Z+2, r22	; 0x02
     61a:	73 83       	std	Z+3, r23	; 0x03
     *        Reference to vector containing values to assign.
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    void Assign(const Vector& source, const size_t offset = 0) noexcept {
        for (size_t i{}; offset + i < size_ && i < source.size_; ++i) {
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	d9 cf       	rjmp	.-78     	; 0x5d2 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_+0x100>
    MatchTrainingSets();
     620:	ce 01       	movw	r24, r28
     622:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN4yrgo6LinReg17MatchTrainingSetsEv>
    InitTrainOrderVector();
     626:	ce 01       	movw	r24, r28
     628:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN4yrgo6LinReg20InitTrainOrderVectorEv>
    InitRandomGenerator();
     62c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN4yrgo6LinReg19InitRandomGeneratorEv>
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	0f 91       	pop	r16
     638:	ff 90       	pop	r15
     63a:	ef 90       	pop	r14
     63c:	df 90       	pop	r13
     63e:	cf 90       	pop	r12
     640:	bf 90       	pop	r11
     642:	af 90       	pop	r10
     644:	08 95       	ret

00000646 <_ZN4yrgo6driver4GPIO7DisableEv>:
}

void GPIO::Blink(const uint16_t& blink_speed_ms) {
	Toggle();
	utils::Delay_ms(blink_speed_ms);
}
     646:	4f 92       	push	r4
     648:	5f 92       	push	r5
     64a:	6f 92       	push	r6
     64c:	7f 92       	push	r7
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	fc 01       	movw	r30, r24
     666:	02 81       	ldd	r16, Z+2	; 0x02
     668:	a0 81       	ld	r26, Z
     66a:	b1 81       	ldd	r27, Z+1	; 0x01
     66c:	cd 91       	ld	r28, X+
     66e:	dc 91       	ld	r29, X
     670:	a8 81       	ld	r26, Y
     672:	21 e0       	ldi	r18, 0x01	; 1
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     686:	20 95       	com	r18
     688:	a2 23       	and	r26, r18
     68a:	a8 83       	st	Y, r26
     68c:	02 81       	ldd	r16, Z+2	; 0x02
     68e:	a0 81       	ld	r26, Z
     690:	b1 81       	ldd	r27, Z+1	; 0x01
     692:	12 96       	adiw	r26, 0x02	; 2
     694:	cd 91       	ld	r28, X+
     696:	dc 91       	ld	r29, X
     698:	13 97       	sbiw	r26, 0x03	; 3
     69a:	a8 81       	ld	r26, Y
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     6b0:	20 95       	com	r18
     6b2:	a2 23       	and	r26, r18
     6b4:	a8 83       	st	Y, r26
     6b6:	02 81       	ldd	r16, Z+2	; 0x02
     6b8:	a5 e6       	ldi	r26, 0x65	; 101
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	4d 90       	ld	r4, X+
     6be:	5d 90       	ld	r5, X+
     6c0:	6d 90       	ld	r6, X+
     6c2:	7c 90       	ld	r7, X
     6c4:	13 97       	sbiw	r26, 0x03	; 3
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     6da:	82 2e       	mov	r8, r18
     6dc:	93 2e       	mov	r9, r19
     6de:	a4 2e       	mov	r10, r20
     6e0:	b5 2e       	mov	r11, r21
     6e2:	80 94       	com	r8
     6e4:	90 94       	com	r9
     6e6:	a0 94       	com	r10
     6e8:	b0 94       	com	r11
     6ea:	84 20       	and	r8, r4
     6ec:	95 20       	and	r9, r5
     6ee:	a6 20       	and	r10, r6
     6f0:	b7 20       	and	r11, r7
     6f2:	8d 92       	st	X+, r8
     6f4:	9d 92       	st	X+, r9
     6f6:	ad 92       	st	X+, r10
     6f8:	bc 92       	st	X, r11
     6fa:	13 97       	sbiw	r26, 0x03	; 3
     6fc:	02 81       	ldd	r16, Z+2	; 0x02
     6fe:	a0 81       	ld	r26, Z
     700:	b1 81       	ldd	r27, Z+1	; 0x01
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	cd 91       	ld	r28, X+
     706:	dc 91       	ld	r29, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	a8 81       	ld	r26, Y
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     720:	20 95       	com	r18
     722:	a2 23       	and	r26, r18
     724:	a8 83       	st	Y, r26
     726:	11 82       	std	Z+1, r1	; 0x01
     728:	10 82       	st	Z, r1
     72a:	12 82       	std	Z+2, r1	; 0x02
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	7f 90       	pop	r7
     744:	6f 90       	pop	r6
     746:	5f 90       	pop	r5
     748:	4f 90       	pop	r4
     74a:	08 95       	ret

0000074c <_ZN4yrgo6driver4GPIO15EnableInterruptEv>:
     74c:	0f 93       	push	r16
     74e:	cf 93       	push	r28
     750:	fc 01       	movw	r30, r24
     752:	78 94       	sei
     754:	a0 81       	ld	r26, Z
     756:	b1 81       	ldd	r27, Z+1	; 0x01
     758:	18 96       	adiw	r26, 0x08	; 8
     75a:	0c 91       	ld	r16, X
     75c:	a8 e6       	ldi	r26, 0x68	; 104
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	cc 91       	ld	r28, X
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     776:	2c 2b       	or	r18, r28
     778:	2c 93       	st	X, r18
     77a:	02 81       	ldd	r16, Z+2	; 0x02
     77c:	01 90       	ld	r0, Z+
     77e:	f0 81       	ld	r31, Z
     780:	e0 2d       	mov	r30, r0
     782:	06 80       	ldd	r0, Z+6	; 0x06
     784:	f7 81       	ldd	r31, Z+7	; 0x07
     786:	e0 2d       	mov	r30, r0
     788:	a0 81       	ld	r26, Z
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     79e:	2a 2b       	or	r18, r26
     7a0:	20 83       	st	Z, r18
     7a2:	cf 91       	pop	r28
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <_ZN4yrgo6driver4GPIO18SetCallbackRoutineEPFvvE>:

void GPIO::SetCallbackRoutine(void (*callback_routine)(void)) {
	if (hardware_->port_reg == &PORTB) {
     7a8:	dc 01       	movw	r26, r24
     7aa:	ed 91       	ld	r30, X+
     7ac:	fc 91       	ld	r31, X
     7ae:	82 81       	ldd	r24, Z+2	; 0x02
     7b0:	93 81       	ldd	r25, Z+3	; 0x03
     7b2:	85 32       	cpi	r24, 0x25	; 37
     7b4:	91 05       	cpc	r25, r1
     7b6:	29 f4       	brne	.+10     	; 0x7c2 <_ZN4yrgo6driver4GPIO18SetCallbackRoutineEPFvvE+0x1a>
	    callback_routines[Callback::Index::kPortB] = callback_routine;
     7b8:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <_ZN4yrgo6driverL17callback_routinesE+0x1>
     7bc:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <_ZN4yrgo6driverL17callback_routinesE>
     7c0:	08 95       	ret
	} else if (hardware_->port_reg == &PORTC) {
     7c2:	88 32       	cpi	r24, 0x28	; 40
     7c4:	91 05       	cpc	r25, r1
     7c6:	29 f4       	brne	.+10     	; 0x7d2 <_ZN4yrgo6driver4GPIO18SetCallbackRoutineEPFvvE+0x2a>
	    callback_routines[Callback::Index::kPortC] = callback_routine;
     7c8:	70 93 6c 01 	sts	0x016C, r23	; 0x80016c <_ZN4yrgo6driverL17callback_routinesE+0x3>
     7cc:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <_ZN4yrgo6driverL17callback_routinesE+0x2>
     7d0:	08 95       	ret
	} else if (hardware_->port_reg == &PORTD) {
     7d2:	8b 97       	sbiw	r24, 0x2b	; 43
     7d4:	21 f4       	brne	.+8      	; 0x7de <_ZN4yrgo6driver4GPIO18SetCallbackRoutineEPFvvE+0x36>
	    callback_routines[Callback::Index::kPortD] = callback_routine;
     7d6:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <_ZL6timer1+0x1>
     7da:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <_ZL6timer1>
     7de:	08 95       	ret

000007e0 <_ZN4yrgo6driver4GPIO16SetIoRegPointersEh>:
	}
}

void GPIO::SetIoRegPointers(const uint8_t pin)  {
	if (PinConnectedToPortD(pin)) {
     7e0:	68 30       	cpi	r22, 0x08	; 8
     7e2:	38 f4       	brcc	.+14     	; 0x7f2 <_ZN4yrgo6driver4GPIO16SetIoRegPointersEh+0x12>
		hardware_ = &pind_;
     7e4:	2a e0       	ldi	r18, 0x0A	; 10
     7e6:	31 e0       	ldi	r19, 0x01	; 1
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
		pin_ = pin;
     7ee:	62 83       	std	Z+2, r22	; 0x02
     7f0:	08 95       	ret
	static constexpr bool PinConnectedToPortD(const uint8_t pin) {
	    return pin >= Port::D0 && pin <= Port::D7;
	}

	static constexpr bool PinConnectedToPortB(const uint8_t pin) {
		return pin >= Port::B0 && pin <= Port::B5;
     7f2:	28 ef       	ldi	r18, 0xF8	; 248
     7f4:	26 0f       	add	r18, r22
	} else if (PinConnectedToPortB(pin)) {
     7f6:	26 30       	cpi	r18, 0x06	; 6
     7f8:	38 f4       	brcc	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		hardware_ = &pinb_;
     7fa:	45 e1       	ldi	r20, 0x15	; 21
     7fc:	51 e0       	ldi	r21, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	51 83       	std	Z+1, r21	; 0x01
     802:	40 83       	st	Z, r20
		pin_ = pin - 8;
     804:	22 83       	std	Z+2, r18	; 0x02
     806:	08 95       	ret
	}

	static constexpr bool PinConnectedToPortC(const uint8_t pin) {
		return pin >= Port::C0 && pin <= Port::C5;
     808:	6e 50       	subi	r22, 0x0E	; 14
	} else if (PinConnectedToPortC(pin)) {
     80a:	66 30       	cpi	r22, 0x06	; 6
     80c:	30 f4       	brcc	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		hardware_ = &pind_;
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	31 e0       	ldi	r19, 0x01	; 1
     812:	fc 01       	movw	r30, r24
     814:	31 83       	std	Z+1, r19	; 0x01
     816:	20 83       	st	Z, r18
		pin_ = pin - 14;
     818:	62 83       	std	Z+2, r22	; 0x02
     81a:	08 95       	ret

0000081c <_ZN4yrgo6driver4GPIO12SetDirectionENS1_9DirectionE>:
	}
}

void GPIO::SetDirection(const enum Direction direction)  {
     81c:	0f 93       	push	r16
	if (direction == Direction::kInputPullup) {
     81e:	61 30       	cpi	r22, 0x01	; 1
     820:	71 05       	cpc	r23, r1
     822:	b9 f4       	brne	.+46     	; 0x852 <_ZN4yrgo6driver4GPIO12SetDirectionENS1_9DirectionE+0x36>
		utils::Set(*(hardware_->port_reg), pin_);
     824:	dc 01       	movw	r26, r24
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	0c 91       	ld	r16, X
     82a:	12 97       	sbiw	r26, 0x02	; 2
     82c:	ed 91       	ld	r30, X+
     82e:	fc 91       	ld	r31, X
     830:	02 80       	ldd	r0, Z+2	; 0x02
     832:	f3 81       	ldd	r31, Z+3	; 0x03
     834:	e0 2d       	mov	r30, r0
     836:	a0 81       	ld	r26, Z
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     84c:	2a 2b       	or	r18, r26
     84e:	20 83       	st	Z, r18
     850:	18 c0       	rjmp	.+48     	; 0x882 <_ZN4yrgo6driver4GPIO12SetDirectionENS1_9DirectionE+0x66>
	} else if (direction == Direction::kOutput) {
     852:	62 30       	cpi	r22, 0x02	; 2
     854:	71 05       	cpc	r23, r1
     856:	a9 f4       	brne	.+42     	; 0x882 <_ZN4yrgo6driver4GPIO12SetDirectionENS1_9DirectionE+0x66>
		utils::Set(*(hardware_->dir_reg), pin_);
     858:	fc 01       	movw	r30, r24
     85a:	02 81       	ldd	r16, Z+2	; 0x02
     85c:	01 90       	ld	r0, Z+
     85e:	f0 81       	ld	r31, Z
     860:	e0 2d       	mov	r30, r0
     862:	01 90       	ld	r0, Z+
     864:	f0 81       	ld	r31, Z
     866:	e0 2d       	mov	r30, r0
     868:	a0 81       	ld	r26, Z
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     87e:	2a 2b       	or	r18, r26
     880:	20 83       	st	Z, r18
	}
}
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE>:
    .io_port = IoPort::kD
};

uint32_t GPIO::pin_list_{};

bool GPIO::Init(const uint8_t pin, const Direction direction) {
     886:	4f 92       	push	r4
     888:	5f 92       	push	r5
     88a:	6f 92       	push	r6
     88c:	7f 92       	push	r7
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	cf 93       	push	r28
     8a2:	dc 01       	movw	r26, r24
     8a4:	e6 2f       	mov	r30, r22
     8a6:	7a 01       	movw	r14, r20
    if (PinNumberValid(pin) && !PinReserved(pin)) {
     8a8:	64 31       	cpi	r22, 0x14	; 20
     8aa:	f0 f4       	brcc	.+60     	; 0x8e8 <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x62>
	 *
	 * @return
	 *        True if specified pin is reserved, else false.
	 ********************************************************************************/
	static constexpr bool PinReserved(const uint8_t pin) {
		return pin <= kPinMax ? utils::Read(pin_list_, pin) : false;
     8ac:	64 31       	cpi	r22, 0x14	; 20
     8ae:	b8 f4       	brcc	.+46     	; 0x8de <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x58>
 *        True if the specified bit is high, else false.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr bool Read(const volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
    return reg & (1ULL << bit);
     8b0:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <_ZN4yrgo6driver4GPIO9pin_list_E>
     8b4:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <_ZN4yrgo6driver4GPIO9pin_list_E+0x1>
     8b8:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <_ZN4yrgo6driver4GPIO9pin_list_E+0x2>
     8bc:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <_ZN4yrgo6driver4GPIO9pin_list_E+0x3>
     8c0:	3a 01       	movw	r6, r20
     8c2:	4b 01       	movw	r8, r22
     8c4:	24 2f       	mov	r18, r20
     8c6:	37 2d       	mov	r19, r7
     8c8:	48 2d       	mov	r20, r8
     8ca:	59 2d       	mov	r21, r9
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 2f       	mov	r16, r30
     8d6:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
     8da:	21 70       	andi	r18, 0x01	; 1
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x5a>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	21 11       	cpse	r18, r1
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x66>
     8e4:	c1 e0       	ldi	r28, 0x01	; 1
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x68>
     8e8:	c0 e0       	ldi	r28, 0x00	; 0
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE+0x68>
     8ec:	c0 e0       	ldi	r28, 0x00	; 0
     8ee:	cc 23       	and	r28, r28
     8f0:	39 f1       	breq	.+78     	; 0x940 <__stack+0x41>
     8f2:	67 01       	movw	r12, r14
     8f4:	0e 2f       	mov	r16, r30
     8f6:	7d 01       	movw	r14, r26
	    SetIoRegPointers(pin);
     8f8:	6e 2f       	mov	r22, r30
     8fa:	cd 01       	movw	r24, r26
     8fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN4yrgo6driver4GPIO16SetIoRegPointersEh>
	    SetDirection(direction);
     900:	b6 01       	movw	r22, r12
     902:	c7 01       	movw	r24, r14
     904:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN4yrgo6driver4GPIO12SetDirectionENS1_9DirectionE>
 *        The specified bit to set.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Set(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
	reg |= (1ULL << bit);
     908:	e5 e6       	ldi	r30, 0x65	; 101
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	40 80       	ld	r4, Z
     90e:	51 80       	ldd	r5, Z+1	; 0x01
     910:	62 80       	ldd	r6, Z+2	; 0x02
     912:	73 80       	ldd	r7, Z+3	; 0x03
     914:	21 e0       	ldi	r18, 0x01	; 1
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     928:	82 2e       	mov	r8, r18
     92a:	93 2e       	mov	r9, r19
     92c:	a4 2e       	mov	r10, r20
     92e:	b5 2e       	mov	r11, r21
     930:	84 28       	or	r8, r4
     932:	95 28       	or	r9, r5
     934:	a6 28       	or	r10, r6
     936:	b7 28       	or	r11, r7
     938:	80 82       	st	Z, r8
     93a:	91 82       	std	Z+1, r9	; 0x01
     93c:	a2 82       	std	Z+2, r10	; 0x02
     93e:	b3 82       	std	Z+3, r11	; 0x03
		utils::Set(pin_list_, pin);
		return true;
	} else {
	    return false;
	}
}
     940:	8c 2f       	mov	r24, r28
     942:	cf 91       	pop	r28
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	bf 90       	pop	r11
     950:	af 90       	pop	r10
     952:	9f 90       	pop	r9
     954:	8f 90       	pop	r8
     956:	7f 90       	pop	r7
     958:	6f 90       	pop	r6
     95a:	5f 90       	pop	r5
     95c:	4f 90       	pop	r4
     95e:	08 95       	ret

00000960 <__vector_3>:
	} else if (direction == Direction::kOutput) {
		utils::Set(*(hardware_->dir_reg), pin_);
	}
}

ISR (PCINT0_vect) {
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	2f 93       	push	r18
     96c:	3f 93       	push	r19
     96e:	4f 93       	push	r20
     970:	5f 93       	push	r21
     972:	6f 93       	push	r22
     974:	7f 93       	push	r23
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	ef 93       	push	r30
     980:	ff 93       	push	r31
    if (callback_routines[Callback::Index::kPortB]) {
     982:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <_ZN4yrgo6driverL17callback_routinesE>
     986:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <_ZN4yrgo6driverL17callback_routinesE+0x1>
     98a:	30 97       	sbiw	r30, 0x00	; 0
     98c:	09 f0       	breq	.+2      	; 0x990 <__vector_3+0x30>
	    callback_routines[Callback::Index::kPortB]();
     98e:	09 95       	icall
	}
}
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <__vector_4>:

ISR (PCINT1_vect) {
     9b2:	1f 92       	push	r1
     9b4:	0f 92       	push	r0
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	2f 93       	push	r18
     9be:	3f 93       	push	r19
     9c0:	4f 93       	push	r20
     9c2:	5f 93       	push	r21
     9c4:	6f 93       	push	r22
     9c6:	7f 93       	push	r23
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
    if (callback_routines[Callback::Index::kPortC]) {
     9d4:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZN4yrgo6driverL17callback_routinesE+0x2>
     9d8:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <_ZN4yrgo6driverL17callback_routinesE+0x3>
     9dc:	30 97       	sbiw	r30, 0x00	; 0
     9de:	09 f0       	breq	.+2      	; 0x9e2 <__vector_4+0x30>
	    callback_routines[Callback::Index::kPortC]();
     9e0:	09 95       	icall
    }
}
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	0f 90       	pop	r0
     a00:	1f 90       	pop	r1
     a02:	18 95       	reti

00000a04 <__vector_5>:

ISR (PCINT2_vect) {
     a04:	1f 92       	push	r1
     a06:	0f 92       	push	r0
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	0f 92       	push	r0
     a0c:	11 24       	eor	r1, r1
     a0e:	2f 93       	push	r18
     a10:	3f 93       	push	r19
     a12:	4f 93       	push	r20
     a14:	5f 93       	push	r21
     a16:	6f 93       	push	r22
     a18:	7f 93       	push	r23
     a1a:	8f 93       	push	r24
     a1c:	9f 93       	push	r25
     a1e:	af 93       	push	r26
     a20:	bf 93       	push	r27
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
    if (callback_routines[Callback::Index::kPortD]) {
     a26:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <_ZL6timer1>
     a2a:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <_ZL6timer1+0x1>
     a2e:	30 97       	sbiw	r30, 0x00	; 0
     a30:	09 f0       	breq	.+2      	; 0xa34 <__vector_5+0x30>
	    callback_routines[Callback::Index::kPortD]();
     a32:	09 95       	icall
    }
}
     a34:	ff 91       	pop	r31
     a36:	ef 91       	pop	r30
     a38:	bf 91       	pop	r27
     a3a:	af 91       	pop	r26
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	7f 91       	pop	r23
     a42:	6f 91       	pop	r22
     a44:	5f 91       	pop	r21
     a46:	4f 91       	pop	r20
     a48:	3f 91       	pop	r19
     a4a:	2f 91       	pop	r18
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <_ZN12_GLOBAL__N_114Timer0CallbackEv>:

/********************************************************************************
 * @brief Enabled pin change interrupts on the button's I/O port 300 ms after
 *        press or release to reduce the effects of contact bounces.
 ********************************************************************************/
void Timer0Callback(void) {
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
    if (timer0.Elapsed()) {
     a5a:	86 e7       	ldi	r24, 0x76	; 118
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZN4yrgo6driver5Timer7ElapsedEv>
     a62:	88 23       	and	r24, r24
     a64:	d9 f0       	breq	.+54     	; 0xa9c <_ZN12_GLOBAL__N_114Timer0CallbackEv+0x46>
        timer0.Stop();
     a66:	86 e7       	ldi	r24, 0x76	; 118
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN4yrgo6driver5Timer4StopEv>
	 *
	 * @return
	 *        The I/O port the device is connected to as an enumerator of the
     *        enum class IoPort.
	 ********************************************************************************/
     enum IoPort GetIoPort(void) const { return hardware_->io_port; };
     a6e:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <_ZL7button1>
     a72:	f0 91 80 01 	lds	r31, 0x0180	; 0x800180 <_ZL7button1+0x1>
     a76:	01 85       	ldd	r16, Z+9	; 0x09
     a78:	12 85       	ldd	r17, Z+10	; 0x0a
}

/********************************************************************************
 * @brief Enables interrupts globally.
 ********************************************************************************/
inline void GlobalInterruptEnable(void) { asm("SEI"); }
     a7a:	78 94       	sei
 *        The specified bit to set.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Set(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
	reg |= (1ULL << bit);
     a7c:	e8 e6       	ldi	r30, 0x68	; 104
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	a0 81       	ld	r26, Z
     a82:	11 27       	eor	r17, r17
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     a98:	2a 2b       	or	r18, r26
     a9a:	20 83       	st	Z, r18
	    button1.EnableInterruptsOnIoPort();
	}
}
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <_ZN12_GLOBAL__N_111PredictTempEv>:
 * This function reads an analog voltage signal from channel 2 using the adc::Read function,
 * scales it to a voltage value between 0 and 5, and then uses a predictive model (presumably stored
 * in the 'model' variable) to estimate the temperature corresponding to the input voltage.
 * The predicted temperature is then rounded using the utils::Round function and printed to the serial output.
 **********************************************************************************/
void PredictTemp(void) {
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	c4 56       	subi	r28, 0x64	; 100
     ab0:	d1 09       	sbc	r29, r1
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
	const double uin = adc::Read(2) / (double)adc::kMaxVal * 5.0;
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	0e 94 73 00 	call	0xe6	; 0xe6 <_ZN4yrgo6driver3adc4ReadEh>
     ac2:	bc 01       	movw	r22, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 ec       	ldi	r19, 0xC0	; 192
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	54 e4       	ldi	r21, 0x44	; 68
     ad4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 ea       	ldi	r20, 0xA0	; 160
     ade:	50 e4       	ldi	r21, 0x40	; 64
     ae0:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
     ae4:	05 e8       	ldi	r16, 0x85	; 133
     ae6:	11 e0       	ldi	r17, 0x01	; 1
     ae8:	f8 01       	movw	r30, r16
     aea:	24 85       	ldd	r18, Z+12	; 0x0c
     aec:	35 85       	ldd	r19, Z+13	; 0x0d
     aee:	46 85       	ldd	r20, Z+14	; 0x0e
     af0:	57 85       	ldd	r21, Z+15	; 0x0f
     af2:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
     af6:	f8 01       	movw	r30, r16
     af8:	20 89       	ldd	r18, Z+16	; 0x10
     afa:	31 89       	ldd	r19, Z+17	; 0x11
     afc:	42 89       	ldd	r20, Z+18	; 0x12
     afe:	53 89       	ldd	r21, Z+19	; 0x13
     b00:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
 ********************************************************************************/
template <typename T1 = int32_t, typename T2 = double>
constexpr T1 Round(const T2 value) {
    static_assert(type_traits::is_integral<T1>::value && type_traits::is_arithmetic<T2>::value, 
	              "Rounding only possible for arithmetic types!");
    return static_cast<T1>(value + 0.5);
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	5f e3       	ldi	r21, 0x3F	; 63
     b0c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     b10:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fixsfsi>
}

template <typename... T>
constexpr void Printf(const char* format, const T&... args...)
{
	char s[100]{'\0'};
     b14:	8e 01       	movw	r16, r28
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	24 e6       	ldi	r18, 0x64	; 100
     b1c:	f8 01       	movw	r30, r16
     b1e:	11 92       	st	Z+, r1
     b20:	2a 95       	dec	r18
     b22:	e9 f7       	brne	.-6      	; 0xb1e <_ZN12_GLOBAL__N_111PredictTempEv+0x7c>
	sprintf(s, format, args...);
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	7f 93       	push	r23
     b2a:	6f 93       	push	r22
     b2c:	8a e5       	ldi	r24, 0x5A	; 90
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	1f 93       	push	r17
     b36:	0f 93       	push	r16
     b38:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <sprintf>
	Print(s);	
     b3c:	63 e6       	ldi	r22, 0x63	; 99
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	c8 01       	movw	r24, r16
     b42:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN4yrgo6driver6serial5PrintEPKcS3_>
	const auto temp = model.Predict(uin);
	serial::Printf("Temp: %d\n", utils::Round(temp));
}
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	cc 59       	subi	r28, 0x9C	; 156
     b52:	df 4f       	sbci	r29, 0xFF	; 255
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <_ZN12_GLOBAL__N_114Timer1CallbackEv>:
/********************************************************************************
 * @brief Toggles PreditctTemp when timer1 elapsed, which is every 100 ms 
 *        when enabled.
 ********************************************************************************/
void Timer1Callback(void) {
    if (timer1.Elapsed()) {
     b68:	8d e6       	ldi	r24, 0x6D	; 109
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZN4yrgo6driver5Timer7ElapsedEv>
     b70:	81 11       	cpse	r24, r1
        PredictTemp();   
     b72:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN12_GLOBAL__N_111PredictTempEv>
     b76:	08 95       	ret

00000b78 <_ZN12_GLOBAL__N_114ButtonCallbackEv>:
 *        Every time button1 is pressed, timer1 is toggled, which indirectly
 *        toggles the LED (since timer1 is responsible for toggling led1).
 *        Pin change interrupts are disabled for 300 ms on the button's I/O port
 *        to reduce the effects of contact bounces.
 ********************************************************************************/
void ButtonCallback(void) {
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cf e7       	ldi	r28, 0x7F	; 127
     b82:	d1 e0       	ldi	r29, 0x01	; 1
     b84:	e8 81       	ld	r30, Y
     b86:	f9 81       	ldd	r31, Y+1	; 0x01
     b88:	01 85       	ldd	r16, Z+9	; 0x09
     b8a:	12 85       	ldd	r17, Z+10	; 0x0a
 *        The specified bit to clear.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Clear(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
    reg &= ~(1ULL << bit);
     b8c:	a8 e6       	ldi	r26, 0x68	; 104
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ec 91       	ld	r30, X
     b92:	11 27       	eor	r17, r17
     b94:	21 e0       	ldi	r18, 0x01	; 1
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	50 e0       	ldi	r21, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     ba8:	20 95       	com	r18
     baa:	e2 23       	and	r30, r18
     bac:	ec 93       	st	X, r30
    button1.DisableInterruptsOnIoPort();
    timer0.Start();
     bae:	86 e7       	ldi	r24, 0x76	; 118
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4yrgo6driver5Timer5StartEv>
	 * @brief Reads input of device.
	 * 
	 * @return
	 *        True if the input signal is high, else false.
	 ********************************************************************************/
	bool Read(void) const { return utils::Read(*(hardware_->pin_reg), pin_); }
     bb6:	0a 81       	ldd	r16, Y+2	; 0x02
     bb8:	e8 81       	ld	r30, Y
     bba:	f9 81       	ldd	r31, Y+1	; 0x01
     bbc:	04 80       	ldd	r0, Z+4	; 0x04
     bbe:	f5 81       	ldd	r31, Z+5	; 0x05
     bc0:	e0 2d       	mov	r30, r0
 *        True if the specified bit is high, else false.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr bool Read(const volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
    return reg & (1ULL << bit);
     bc2:	20 81       	ld	r18, Z
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
     bd6:	21 70       	andi	r18, 0x01	; 1
	if (button1.Read()) {
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	a0 e0       	ldi	r26, 0x00	; 0
     be8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__cmpdi2_s8>
     bec:	31 f0       	breq	.+12     	; 0xbfa <_ZN12_GLOBAL__N_114ButtonCallbackEv+0x82>
		PredictTemp();
     bee:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN12_GLOBAL__N_111PredictTempEv>
		timer1.Restart();
     bf2:	8d e6       	ldi	r24, 0x6D	; 109
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_ZN4yrgo6driver5Timer7RestartEv>
	}
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <_Z41__static_initialization_and_destruction_0ii>:
    while (1) 
    {
	    watchdog::Reset();
    }
	return 0;
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
     c0e:	8b 01       	movw	r16, r22
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	91 f5       	brne	.+100    	; 0xc78 <_Z41__static_initialization_and_destruction_0ii+0x74>
     c14:	6f 3f       	cpi	r22, 0xFF	; 255
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	79 f5       	brne	.+94     	; 0xc78 <_Z41__static_initialization_and_destruction_0ii+0x74>
 *        Timer used to reduced the effect of contact bounces when pressing
 *        the button.
 * @param timer1
 *        Timer used to predict temp every 60 seconds.
 ********************************************************************************/
static yrgo::LinReg model{};
     c1a:	e5 e8       	ldi	r30, 0x85	; 133
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	84 e1       	ldi	r24, 0x14	; 20
     c20:	df 01       	movw	r26, r30
     c22:	1d 92       	st	X+, r1
     c24:	8a 95       	dec	r24
     c26:	e9 f7       	brne	.-6      	; 0xc22 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     *        The PIN number of the device, either ATmega328P port numbers or
	 *        Arduino pin numbers or
	 * @param direction
	 *        The direction of the device.
	 ********************************************************************************/
	GPIO(const uint8_t pin, const Direction direction) { Init(pin, direction); }
     c28:	e2 e8       	ldi	r30, 0x82	; 130
     c2a:	f1 e0       	ldi	r31, 0x01	; 1
     c2c:	11 82       	std	Z+1, r1	; 0x01
     c2e:	10 82       	st	Z, r1
     c30:	12 82       	std	Z+2, r1	; 0x02
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	62 e0       	ldi	r22, 0x02	; 2
     c38:	cf 01       	movw	r24, r30
     c3a:	0e 94 43 04 	call	0x886	; 0x886 <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE>
     c3e:	ef e7       	ldi	r30, 0x7F	; 127
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	11 82       	std	Z+1, r1	; 0x01
     c44:	10 82       	st	Z, r1
     c46:	12 82       	std	Z+2, r1	; 0x02
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	6d e0       	ldi	r22, 0x0D	; 13
     c4e:	cf 01       	movw	r24, r30
     c50:	0e 94 43 04 	call	0x886	; 0x886 <_ZN4yrgo6driver4GPIO4InitEhNS1_9DirectionE>
static GPIO tmp1{2, GPIO::Direction::kInput};
static GPIO button1{13, GPIO::Direction::kInputPullup};
static Timer timer0{Timer::Circuit::k0, 300};
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	4c e2       	ldi	r20, 0x2C	; 44
     c58:	51 e0       	ldi	r21, 0x01	; 1
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	86 e7       	ldi	r24, 0x76	; 118
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN4yrgo6driver5TimerC1ENS1_7CircuitEjb>
static Timer timer1{Timer::Circuit::k1, 60000};
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	40 e6       	ldi	r20, 0x60	; 96
     c6a:	5a ee       	ldi	r21, 0xEA	; 234
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	8d e6       	ldi	r24, 0x6D	; 109
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN4yrgo6driver5TimerC1ENS1_7CircuitEjb>
     c78:	cd 2b       	or	r28, r29
     c7a:	69 f5       	brne	.+90     	; 0xcd6 <_Z41__static_initialization_and_destruction_0ii+0xd2>
     c7c:	0f 3f       	cpi	r16, 0xFF	; 255
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255
     c80:	51 f5       	brne	.+84     	; 0xcd6 <_Z41__static_initialization_and_destruction_0ii+0xd2>
     c82:	8d e6       	ldi	r24, 0x6D	; 109
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN4yrgo6driver5TimerD1Ev>
 *        Timer used to predict temp every 60 seconds.
 ********************************************************************************/
static yrgo::LinReg model{};
static GPIO tmp1{2, GPIO::Direction::kInput};
static GPIO button1{13, GPIO::Direction::kInputPullup};
static Timer timer0{Timer::Circuit::k0, 300};
     c8a:	86 e7       	ldi	r24, 0x76	; 118
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 34 09 	call	0x1268	; 0x1268 <_ZN4yrgo6driver5TimerD1Ev>
	GPIO(GPIO&&) = delete;

	/********************************************************************************
	 * @brief Disable device before deletion.
	 ********************************************************************************/
	~GPIO(void)  { Disable(); }
     c92:	8f e7       	ldi	r24, 0x7F	; 127
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 23 03 	call	0x646	; 0x646 <_ZN4yrgo6driver4GPIO7DisableEv>
     c9a:	82 e8       	ldi	r24, 0x82	; 130
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	0e 94 23 03 	call	0x646	; 0x646 <_ZN4yrgo6driver4GPIO7DisableEv>
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     ca2:	c5 e8       	ldi	r28, 0x85	; 133
     ca4:	d1 e0       	ldi	r29, 0x01	; 1
     ca6:	88 85       	ldd	r24, Y+8	; 0x08
     ca8:	99 85       	ldd	r25, Y+9	; 0x09
     caa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     cae:	19 86       	std	Y+9, r1	; 0x09
     cb0:	18 86       	std	Y+8, r1	; 0x08
     * @brief Clears content of referenced vector by deallocating memory on the
     *        heap. All member variables are reset to starting values.
     ********************************************************************************/
    void Clear(void) noexcept {
        detail::Delete<T>(data_);
        size_ = 0;
     cb2:	1b 86       	std	Y+11, r1	; 0x0b
     cb4:	1a 86       	std	Y+10, r1	; 0x0a
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     cbe:	1d 82       	std	Y+5, r1	; 0x05
     cc0:	1c 82       	std	Y+4, r1	; 0x04
     cc2:	1f 82       	std	Y+7, r1	; 0x07
     cc4:	1e 82       	std	Y+6, r1	; 0x06
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     cc6:	88 81       	ld	r24, Y
     cc8:	99 81       	ldd	r25, Y+1	; 0x01
     cca:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     cce:	19 82       	std	Y+1, r1	; 0x01
     cd0:	18 82       	st	Y, r1
     cd2:	1b 82       	std	Y+3, r1	; 0x03
     cd4:	1a 82       	std	Y+2, r1	; 0x02
    while (1) 
    {
	    watchdog::Reset();
    }
	return 0;
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd>:
     *
     * @param values
     *        Reference to the values to store in newly created vector.
     ********************************************************************************/
    template <size_t size>
    Vector(const T (&values)[size]) noexcept {
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
     cea:	8b 01       	movw	r16, r22
     cec:	19 82       	std	Y+1, r1	; 0x01
     cee:	18 82       	st	Y, r1
     cf0:	1b 82       	std	Y+3, r1	; 0x03
     cf2:	1a 82       	std	Y+2, r1	; 0x02
 * @return
 *        A pointer to the resized block at success, else a null pointer.
 ********************************************************************************/
template <typename T>
inline T* Resize(T* block, const size_t new_size) {
    return static_cast<T*>(realloc(block, sizeof(T) * new_size));
     cf4:	64 e1       	ldi	r22, 0x14	; 20
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <realloc>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	41 f0       	breq	.+16     	; 0xd14 <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x34>
        data_ = copy;
     d04:	99 83       	std	Y+1, r25	; 0x01
     d06:	88 83       	st	Y, r24
        size_ = new_size;
     d08:	85 e0       	ldi	r24, 0x05	; 5
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9b 83       	std	Y+3, r25	; 0x03
     d0e:	8a 83       	std	Y+2, r24	; 0x02
        return true;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x36>
     * @return
     *        True if the reallocation succeeded, else false.
     ********************************************************************************/
    bool Resize(const size_t new_size) noexcept {
        auto copy{detail::Resize<T>(data_, new_size)};
        if (copy == nullptr) return false;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     * @param values
     *        Reference to the values to store in newly created vector.
     ********************************************************************************/
    template <size_t size>
    Vector(const T (&values)[size]) noexcept {
        if (Resize(size)) {
     d16:	88 23       	and	r24, r24
     d18:	01 f1       	breq	.+64     	; 0xd5a <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x7a>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    template <size_t size>
    void Assign(const T (&values)[size], const size_t offset = 0) noexcept {
        for (size_t i{}; i < size && offset + i < size_; ++i) {
     d1e:	85 30       	cpi	r24, 0x05	; 5
     d20:	91 05       	cpc	r25, r1
     d22:	d8 f4       	brcc	.+54     	; 0xd5a <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x7a>
     d24:	2a 81       	ldd	r18, Y+2	; 0x02
     d26:	3b 81       	ldd	r19, Y+3	; 0x03
     d28:	82 17       	cp	r24, r18
     d2a:	93 07       	cpc	r25, r19
     d2c:	b0 f4       	brcc	.+44     	; 0xd5a <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x7a>
            data_[offset + i] = values[i];
     d2e:	9c 01       	movw	r18, r24
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	e8 81       	ld	r30, Y
     d3a:	f9 81       	ldd	r31, Y+1	; 0x01
     d3c:	e2 0f       	add	r30, r18
     d3e:	f3 1f       	adc	r31, r19
     d40:	d8 01       	movw	r26, r16
     d42:	a2 0f       	add	r26, r18
     d44:	b3 1f       	adc	r27, r19
     d46:	4d 91       	ld	r20, X+
     d48:	5d 91       	ld	r21, X+
     d4a:	6d 91       	ld	r22, X+
     d4c:	7c 91       	ld	r23, X
     d4e:	40 83       	st	Z, r20
     d50:	51 83       	std	Z+1, r21	; 0x01
     d52:	62 83       	std	Z+2, r22	; 0x02
     d54:	73 83       	std	Z+3, r23	; 0x03
     * @param offset
     *        Offset to assign values from a specified starting index.
     ********************************************************************************/
    template <size_t size>
    void Assign(const T (&values)[size], const size_t offset = 0) noexcept {
        for (size_t i{}; i < size && offset + i < size_; ++i) {
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	e2 cf       	rjmp	.-60     	; 0xd1e <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd+0x3e>
    template <size_t size>
    Vector(const T (&values)[size]) noexcept {
        if (Resize(size)) {
            Assign(values);
        }
    }
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <main>:
 *        voltage is supplied. The hardware is interrupt controlled, hence the
 *        while loop is almost empty. If the program gets stuck anywhere, the
 *        watchdog timer won't be reset in time and the program will then restart.
 ********************************************************************************/
int main(void)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	e0 97       	sbiw	r28, 0x30	; 48
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
/********************************************************************************
 * @brief Sets callback routines, enabled pin change interrupt on button1 and
 *        enables the watchdog timer in system reset mode.
 ********************************************************************************/
inline void Setup(void) {
	const Vector<double> inputs{{0.0, 1.0, 2.0, 3.0, 4.0}};
     d78:	84 e1       	ldi	r24, 0x14	; 20
     d7a:	e2 e3       	ldi	r30, 0x32	; 50
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	de 01       	movw	r26, r28
     d80:	11 96       	adiw	r26, 0x01	; 1
     d82:	01 90       	ld	r0, Z+
     d84:	0d 92       	st	X+, r0
     d86:	8a 95       	dec	r24
     d88:	e1 f7       	brne	.-8      	; 0xd82 <main+0x1e>
     d8a:	be 01       	movw	r22, r28
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	8d 96       	adiw	r24, 0x2d	; 45
     d94:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd>
	const Vector<double> outputs{{-50.0, 50.0, 150.0, 250.0, 350.0}};
     d98:	84 e1       	ldi	r24, 0x14	; 20
     d9a:	e6 e4       	ldi	r30, 0x46	; 70
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	de 01       	movw	r26, r28
     da0:	55 96       	adiw	r26, 0x15	; 21
     da2:	01 90       	ld	r0, Z+
     da4:	0d 92       	st	X+, r0
     da6:	8a 95       	dec	r24
     da8:	e1 f7       	brne	.-8      	; 0xda2 <main+0x3e>
     daa:	be 01       	movw	r22, r28
     dac:	6b 5e       	subi	r22, 0xEB	; 235
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	ce 01       	movw	r24, r28
     db2:	89 96       	adiw	r24, 0x29	; 41
     db4:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZN4yrgo9container6VectorIdEC1ILj5EEERAT__Kd>
	model.LoadTrainingData(inputs, outputs);
     db8:	ae 01       	movw	r20, r28
     dba:	47 5d       	subi	r20, 0xD7	; 215
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	be 01       	movw	r22, r28
     dc0:	63 5d       	subi	r22, 0xD3	; 211
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	85 e8       	ldi	r24, 0x85	; 133
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN4yrgo6LinReg16LoadTrainingDataERKNS_9container6VectorIdEES5_>
	model.Train(1000);
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	37 ed       	ldi	r19, 0xD7	; 215
     dd0:	43 e2       	ldi	r20, 0x23	; 35
     dd2:	5c e3       	ldi	r21, 0x3C	; 60
     dd4:	68 ee       	ldi	r22, 0xE8	; 232
     dd6:	73 e0       	ldi	r23, 0x03	; 3
     dd8:	85 e8       	ldi	r24, 0x85	; 133
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	0e 94 83 01 	call	0x306	; 0x306 <_ZN4yrgo6LinReg5TrainEjd>
	
	serial::Init();
     de0:	60 e8       	ldi	r22, 0x80	; 128
     de2:	75 e2       	ldi	r23, 0x25	; 37
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 66 07 	call	0xecc	; 0xecc <_ZN4yrgo6driver6serial4InitEm>
	PredictTemp();
     dec:	0e 94 51 05 	call	0xaa2	; 0xaa2 <_ZN12_GLOBAL__N_111PredictTempEv>
	timer1.Start();
     df0:	8d e6       	ldi	r24, 0x6D	; 109
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4yrgo6driver5Timer5StartEv>
	
	button1.SetCallbackRoutine(ButtonCallback);
     df8:	6c eb       	ldi	r22, 0xBC	; 188
     dfa:	75 e0       	ldi	r23, 0x05	; 5
     dfc:	8f e7       	ldi	r24, 0x7F	; 127
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN4yrgo6driver4GPIO18SetCallbackRoutineEPFvvE>
	timer0.SetCallback(Timer0Callback);
     e04:	6b e2       	ldi	r22, 0x2B	; 43
     e06:	75 e0       	ldi	r23, 0x05	; 5
     e08:	86 e7       	ldi	r24, 0x76	; 118
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN4yrgo6driver5Timer11SetCallbackEPFvvE>
    timer1.SetCallback(Timer1Callback);
     e10:	64 eb       	ldi	r22, 0xB4	; 180
     e12:	75 e0       	ldi	r23, 0x05	; 5
     e14:	8d e6       	ldi	r24, 0x6D	; 109
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN4yrgo6driver5Timer11SetCallbackEPFvvE>

	button1.EnableInterrupt();
     e1c:	8f e7       	ldi	r24, 0x7F	; 127
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN4yrgo6driver4GPIO15EnableInterruptEv>
	watchdog::Init(watchdog::Timeout::k1024ms);
     e24:	86 e0       	ldi	r24, 0x06	; 6
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN4yrgo6driver8watchdog4InitENS1_7TimeoutE>
	watchdog::EnableSystemReset();
     e2c:	0e 94 0e 0a 	call	0x141c	; 0x141c <_ZN4yrgo6driver8watchdog17EnableSystemResetEv>
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     e30:	89 a5       	ldd	r24, Y+41	; 0x29
     e32:	9a a5       	ldd	r25, Y+42	; 0x2a
     e34:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    block = nullptr;
     e38:	1a a6       	std	Y+42, r1	; 0x2a
     e3a:	19 a6       	std	Y+41, r1	; 0x29
     * @brief Clears content of referenced vector by deallocating memory on the
     *        heap. All member variables are reset to starting values.
     ********************************************************************************/
    void Clear(void) noexcept {
        detail::Delete<T>(data_);
        size_ = 0;
     e3c:	1c a6       	std	Y+44, r1	; 0x2c
     e3e:	1b a6       	std	Y+43, r1	; 0x2b
 * @param block
 *        Reference to the block to delete.
 ********************************************************************************/
template <typename T>
inline void Delete(T* &block) {
    free(block);
     e40:	8d a5       	ldd	r24, Y+45	; 0x2d
     e42:	9e a5       	ldd	r25, Y+46	; 0x2e
     e44:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
{
    Setup();

    while (1) 
    {
	    watchdog::Reset();
     e48:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN4yrgo6driver8watchdog5ResetEv>
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <main+0xe4>

00000e4e <_GLOBAL__sub_I_main>:
    }
	return 0;
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	7f ef       	ldi	r23, 0xFF	; 255
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z41__static_initialization_and_destruction_0ii>
     e5a:	08 95       	ret

00000e5c <_GLOBAL__sub_D_main>:
     e5c:	6f ef       	ldi	r22, 0xFF	; 255
     e5e:	7f ef       	ldi	r23, 0xFF	; 255
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z41__static_initialization_and_destruction_0ii>
     e68:	08 95       	ret

00000e6a <_ZN4yrgo6driver6serial12_GLOBAL__N_19PrintCharEc>:

constexpr uint16_t GetBaudRateValue(const uint32_t baud_rate_kbps) {
	return baud_rate_kbps == 9600 ? 103 : utils::Round<uint16_t>(F_CPU / 16.0 * baud_rate_kbps);
}

void PrintChar(const char c) {
     e6a:	0f 93       	push	r16
     e6c:	e8 2f       	mov	r30, r24
     e6e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	05 e0       	ldi	r16, 0x05	; 5
     e82:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
     e86:	21 70       	andi	r18, 0x01	; 1
	while (utils::Read(UCSR0A, UDRE0) == 0);
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__cmpdi2_s8>
     e9c:	41 f3       	breq	.-48     	; 0xe6e <_ZN4yrgo6driver6serial12_GLOBAL__N_19PrintCharEc+0x4>
	UDR0 = c;
     e9e:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc>:

void PrintString(const char* s) {
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	ec 01       	movw	r28, r24
    for (const char* i{s}; *i; ++i) {
     eac:	88 81       	ld	r24, Y
     eae:	88 23       	and	r24, r24
     eb0:	51 f0       	breq	.+20     	; 0xec6 <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc+0x20>
        PrintChar(*i);
     eb2:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN4yrgo6driver6serial12_GLOBAL__N_19PrintCharEc>
        if (*i == kCarriageReturn) {
     eb6:	88 81       	ld	r24, Y
     eb8:	8d 30       	cpi	r24, 0x0D	; 13
     eba:	19 f4       	brne	.+6      	; 0xec2 <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc+0x1c>
	         PrintChar(kNewLine);
     ebc:	8a e0       	ldi	r24, 0x0A	; 10
     ebe:	0e 94 35 07 	call	0xe6a	; 0xe6a <_ZN4yrgo6driver6serial12_GLOBAL__N_19PrintCharEc>
	while (utils::Read(UCSR0A, UDRE0) == 0);
	UDR0 = c;
}

void PrintString(const char* s) {
    for (const char* i{s}; *i; ++i) {
     ec2:	21 96       	adiw	r28, 0x01	; 1
     ec4:	f3 cf       	rjmp	.-26     	; 0xeac <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc+0x6>
        PrintChar(*i);
        if (*i == kCarriageReturn) {
	         PrintChar(kNewLine);
        }
    }
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <_ZN4yrgo6driver6serial4InitEm>:

} /* namespace */

void Init(const uint32_t baud_rate_kbps) {
    static bool serial_initialized{false};
	if (serial_initialized) return;
     ecc:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <_ZZN4yrgo6driver6serial4InitEmE18serial_initialized>
     ed0:	21 11       	cpse	r18, r1
     ed2:	30 c0       	rjmp	.+96     	; 0xf34 <_ZN4yrgo6driver6serial4InitEm+0x68>
 *        The specified bit to set.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Set(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
	reg |= (1ULL << bit);
     ed4:	e1 ec       	ldi	r30, 0xC1	; 193
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	20 81       	ld	r18, Z
     eda:	28 60       	ori	r18, 0x08	; 8
     edc:	20 83       	st	Z, r18
     ede:	e2 ec       	ldi	r30, 0xC2	; 194
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	20 81       	ld	r18, Z
     ee4:	22 60       	ori	r18, 0x02	; 2
     ee6:	20 83       	st	Z, r18
     ee8:	20 81       	ld	r18, Z
     eea:	24 60       	ori	r18, 0x04	; 4
     eec:	20 83       	st	Z, r18
static constexpr char kNewLine{'\n'};

namespace {

constexpr uint16_t GetBaudRateValue(const uint32_t baud_rate_kbps) {
	return baud_rate_kbps == 9600 ? 103 : utils::Round<uint16_t>(F_CPU / 16.0 * baud_rate_kbps);
     eee:	60 38       	cpi	r22, 0x80	; 128
     ef0:	25 e2       	ldi	r18, 0x25	; 37
     ef2:	72 07       	cpc	r23, r18
     ef4:	81 05       	cpc	r24, r1
     ef6:	91 05       	cpc	r25, r1
     ef8:	89 f0       	breq	.+34     	; 0xf1c <_ZN4yrgo6driver6serial4InitEm+0x50>
     efa:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	34 e2       	ldi	r19, 0x24	; 36
     f02:	44 e7       	ldi	r20, 0x74	; 116
     f04:	59 e4       	ldi	r21, 0x49	; 73
     f06:	0e 94 32 0c 	call	0x1864	; 0x1864 <__mulsf3>
 ********************************************************************************/
template <typename T1 = int32_t, typename T2 = double>
constexpr T1 Round(const T2 value) {
    static_assert(type_traits::is_integral<T1>::value && type_traits::is_arithmetic<T2>::value, 
	              "Rounding only possible for arithmetic types!");
    return static_cast<T1>(value + 0.5);
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
     f16:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <_ZN4yrgo6driver6serial4InitEm+0x54>
     f1c:	67 e6       	ldi	r22, 0x67	; 103
     f1e:	70 e0       	ldi	r23, 0x00	; 0
void Init(const uint32_t baud_rate_kbps) {
    static bool serial_initialized{false};
	if (serial_initialized) return;
	utils::Set(UCSR0B, TXEN0);
	utils::Set(UCSR0C, UCSZ00, UCSZ01);
	UBRR0 = GetBaudRateValue(baud_rate_kbps);
     f20:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     f24:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UDR0 = '\r';
     f28:	8d e0       	ldi	r24, 0x0D	; 13
     f2a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_initialized = true;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZZN4yrgo6driver6serial4InitEmE18serial_initialized>
     f34:	08 95       	ret

00000f36 <_ZN4yrgo6driver6serial5PrintEPKcS3_>:
}

void Print(const char* s, const char* end) {
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	eb 01       	movw	r28, r22
    PrintString(s);
     f3c:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc>
	PrintString(end);
     f40:	ce 01       	movw	r24, r28
     f42:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN4yrgo6driver6serial12_GLOBAL__N_111PrintStringEPKc>
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <_ZN4yrgo6driver5Timer5StartEv>:
	    if (start) Start();
		return true;
	} else {
	    return false;
	}
}
     f4c:	0f 93       	push	r16
     f4e:	cf 93       	push	r28
     f50:	fc 01       	movw	r30, r24
     f52:	78 94       	sei
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	95 81       	ldd	r25, Z+5	; 0x05
     f58:	a6 81       	ldd	r26, Z+6	; 0x06
     f5a:	b7 81       	ldd	r27, Z+7	; 0x07
     f5c:	89 2b       	or	r24, r25
     f5e:	8a 2b       	or	r24, r26
     f60:	8b 2b       	or	r24, r27
     f62:	c1 f0       	breq	.+48     	; 0xf94 <_ZN4yrgo6driver5Timer5StartEv+0x48>
     f64:	a0 81       	ld	r26, Z
     f66:	b1 81       	ldd	r27, Z+1	; 0x01
     f68:	14 96       	adiw	r26, 0x04	; 4
     f6a:	0c 91       	ld	r16, X
     f6c:	14 97       	sbiw	r26, 0x04	; 4
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	0d 90       	ld	r0, X+
     f72:	bc 91       	ld	r27, X
     f74:	a0 2d       	mov	r26, r0
     f76:	cc 91       	ld	r28, X
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     f8c:	2c 2b       	or	r18, r28
     f8e:	2c 93       	st	X, r18
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 87       	std	Z+8, r24	; 0x08
     f94:	cf 91       	pop	r28
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <_ZN4yrgo6driver5Timer4StopEv>:
     f9a:	0f 93       	push	r16
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	dc 01       	movw	r26, r24
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	11 97       	sbiw	r26, 0x01	; 1
     fa8:	04 81       	ldd	r16, Z+4	; 0x04
     faa:	c2 81       	ldd	r28, Z+2	; 0x02
     fac:	d3 81       	ldd	r29, Z+3	; 0x03
     fae:	e8 81       	ld	r30, Y
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
     fc4:	20 95       	com	r18
     fc6:	e2 23       	and	r30, r18
     fc8:	e8 83       	st	Y, r30
     fca:	18 96       	adiw	r26, 0x08	; 8
     fcc:	1c 92       	st	X, r1
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <_ZN4yrgo6driver5Timer7RestartEv>:
     fd6:	dc 01       	movw	r26, r24
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	01 90       	ld	r0, Z+
     fde:	f0 81       	ld	r31, Z
     fe0:	e0 2d       	mov	r30, r0
     fe2:	10 82       	st	Z, r1
     fe4:	11 82       	std	Z+1, r1	; 0x01
     fe6:	12 82       	std	Z+2, r1	; 0x02
     fe8:	13 82       	std	Z+3, r1	; 0x03
     fea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4yrgo6driver5Timer5StartEv>
     fee:	08 95       	ret

00000ff0 <_ZN4yrgo6driver5Timer7ElapsedEv>:
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	fc 01       	movw	r30, r24
     ff6:	a0 81       	ld	r26, Z
     ff8:	b1 81       	ldd	r27, Z+1	; 0x01
     ffa:	0d 90       	ld	r0, X+
     ffc:	bc 91       	ld	r27, X
     ffe:	a0 2d       	mov	r26, r0
    1000:	0d 91       	ld	r16, X+
    1002:	1d 91       	ld	r17, X+
    1004:	2d 91       	ld	r18, X+
    1006:	3c 91       	ld	r19, X
    1008:	13 97       	sbiw	r26, 0x03	; 3
    100a:	44 81       	ldd	r20, Z+4	; 0x04
    100c:	55 81       	ldd	r21, Z+5	; 0x05
    100e:	66 81       	ldd	r22, Z+6	; 0x06
    1010:	77 81       	ldd	r23, Z+7	; 0x07
    1012:	04 17       	cp	r16, r20
    1014:	15 07       	cpc	r17, r21
    1016:	26 07       	cpc	r18, r22
    1018:	37 07       	cpc	r19, r23
    101a:	28 f0       	brcs	.+10     	; 0x1026 <_ZN4yrgo6driver5Timer7ElapsedEv+0x36>
    101c:	80 85       	ldd	r24, Z+8	; 0x08
    101e:	81 11       	cpse	r24, r1
    1020:	04 c0       	rjmp	.+8      	; 0x102a <_ZN4yrgo6driver5Timer7ElapsedEv+0x3a>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <_ZN4yrgo6driver5Timer7ElapsedEv+0x3c>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	01 c0       	rjmp	.+2      	; 0x102c <_ZN4yrgo6driver5Timer7ElapsedEv+0x3c>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	81 11       	cpse	r24, r1
    102e:	07 c0       	rjmp	.+14     	; 0x103e <_ZN4yrgo6driver5Timer7ElapsedEv+0x4e>
    1030:	1d 92       	st	X+, r1
    1032:	1d 92       	st	X+, r1
    1034:	1d 92       	st	X+, r1
    1036:	1c 92       	st	X, r1
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <_ZN4yrgo6driver5Timer7ElapsedEv+0x50>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <_ZN4yrgo6driver5Timer16SetElapseTime_msEj>:
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	8c 01       	movw	r16, r24
    1050:	eb 01       	movw	r28, r22
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	11 f4       	brne	.+4      	; 0x105a <_ZN4yrgo6driver5Timer16SetElapseTime_msEj+0x14>
    1056:	0e 94 cd 07 	call	0xf9a	; 0xf9a <_ZN4yrgo6driver5Timer4StopEv>
    105a:	20 97       	sbiw	r28, 0x00	; 0
    105c:	a1 f0       	breq	.+40     	; 0x1086 <_ZN4yrgo6driver5Timer16SetElapseTime_msEj+0x40>
    105e:	be 01       	movw	r22, r28
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 80 0b 	call	0x1700	; 0x1700 <__floatunsisf>
    1068:	2f e6       	ldi	r18, 0x6F	; 111
    106a:	32 e1       	ldi	r19, 0x12	; 18
    106c:	43 e0       	ldi	r20, 0x03	; 3
    106e:	5e e3       	ldi	r21, 0x3E	; 62
    1070:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__addsf3>
    1080:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
    1084:	03 c0       	rjmp	.+6      	; 0x108c <_ZN4yrgo6driver5Timer16SetElapseTime_msEj+0x46>
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	64 83       	std	Z+4, r22	; 0x04
    1090:	75 83       	std	Z+5, r23	; 0x05
    1092:	86 83       	std	Z+6, r24	; 0x06
    1094:	97 83       	std	Z+7, r25	; 0x07
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <_ZN4yrgo6driver5Timer11SetCallbackEPFvvE>:
    10a0:	61 15       	cp	r22, r1
    10a2:	71 05       	cpc	r23, r1
    10a4:	69 f0       	breq	.+26     	; 0x10c0 <_ZN4yrgo6driver5Timer11SetCallbackEPFvvE+0x20>
    10a6:	dc 01       	movw	r26, r24
    10a8:	ed 91       	ld	r30, X+
    10aa:	fc 91       	ld	r31, X
    10ac:	e5 81       	ldd	r30, Z+5	; 0x05
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	e6 56       	subi	r30, 0x66	; 102
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	71 83       	std	Z+1, r23	; 0x01
    10ba:	60 83       	st	Z, r22
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	08 95       	ret
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE>:
    10c4:	0f 93       	push	r16
    10c6:	fc 01       	movw	r30, r24
    10c8:	61 15       	cp	r22, r1
    10ca:	71 05       	cpc	r23, r1
    10cc:	59 f4       	brne	.+22     	; 0x10e4 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0x20>
    10ce:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_ZN4yrgo6driver5Timer11timer_list_E>
    10d2:	80 fd       	sbrc	r24, 0
    10d4:	68 c0       	rjmp	.+208    	; 0x11a6 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xe2>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	85 bd       	out	0x25, r24	; 37
    10da:	8c e2       	ldi	r24, 0x2C	; 44
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    10e2:	4c c0       	rjmp	.+152    	; 0x117c <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xb8>
    10e4:	61 30       	cpi	r22, 0x01	; 1
    10e6:	71 05       	cpc	r23, r1
    10e8:	39 f5       	brne	.+78     	; 0x1138 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0x74>
    10ea:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <_ZN4yrgo6driver5Timer11timer_list_E>
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	01 e0       	ldi	r16, 0x01	; 1
    10fe:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
    1102:	21 70       	andi	r18, 0x01	; 1
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__cmpdi2_s8>
    1118:	09 f0       	breq	.+2      	; 0x111c <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0x58>
    111a:	47 c0       	rjmp	.+142    	; 0x11aa <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xe6>
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    112a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    112e:	86 e2       	ldi	r24, 0x26	; 38
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
    1136:	22 c0       	rjmp	.+68     	; 0x117c <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xb8>
    1138:	62 30       	cpi	r22, 0x02	; 2
    113a:	71 05       	cpc	r23, r1
    113c:	f9 f4       	brne	.+62     	; 0x117c <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xb8>
    113e:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <_ZN4yrgo6driver5Timer11timer_list_E>
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 e0       	ldi	r16, 0x02	; 2
    1152:	0e 94 ce 0c 	call	0x199c	; 0x199c <__lshrdi3>
    1156:	21 70       	andi	r18, 0x01	; 1
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e0       	ldi	r26, 0x00	; 0
    1168:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__cmpdi2_s8>
    116c:	01 f5       	brne	.+64     	; 0x11ae <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xea>
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	01 90       	ld	r0, Z+
    117e:	f0 81       	ld	r31, Z
    1180:	e0 2d       	mov	r30, r0
    1182:	05 81       	ldd	r16, Z+5	; 0x05
    1184:	ec ea       	ldi	r30, 0xAC	; 172
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	a0 81       	ld	r26, Z
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
    119e:	2a 2b       	or	r18, r26
    11a0:	20 83       	st	Z, r18
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xec>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xec>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE+0xec>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <_ZN4yrgo6driver5TimerC1ENS1_7CircuitEjb>:
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	ec 01       	movw	r28, r24
    11c0:	7a 01       	movw	r14, r20
    11c2:	12 2f       	mov	r17, r18
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	18 82       	st	Y, r1
    11c8:	7b 83       	std	Y+3, r23	; 0x03
    11ca:	6a 83       	std	Y+2, r22	; 0x02
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	1d 82       	std	Y+5, r1	; 0x05
    11d0:	1e 82       	std	Y+6, r1	; 0x06
    11d2:	1f 82       	std	Y+7, r1	; 0x07
    11d4:	18 86       	std	Y+8, r1	; 0x08
    11d6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN4yrgo6driver5Timer12InitHardwareERPNS1_8HardwareENS1_7CircuitE>
    11da:	b7 01       	movw	r22, r14
    11dc:	ce 01       	movw	r24, r28
    11de:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN4yrgo6driver5Timer16SetElapseTime_msEj>
    11e2:	11 23       	and	r17, r17
    11e4:	19 f0       	breq	.+6      	; 0x11ec <_ZN4yrgo6driver5TimerC1ENS1_7CircuitEjb+0x38>
    11e6:	ce 01       	movw	r24, r28
    11e8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN4yrgo6driver5Timer5StartEv>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	08 95       	ret

000011f8 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE>:
	}
	utils::Set(timer_list_, hardware->index);
	return true;
}

void Timer::DisableHardware(Hardware* &hardware, const enum Circuit timer_circuit) {
    11f8:	0f 93       	push	r16
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	dc 01       	movw	r26, r24
	if (timer_circuit == Timer::Circuit::k0) {
    1200:	61 15       	cp	r22, r1
    1202:	71 05       	cpc	r23, r1
    1204:	21 f4       	brne	.+8      	; 0x120e <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE+0x16>
		    TCCR0B = 0x00;
    1206:	15 bc       	out	0x25, r1	; 37
			TIMSK0 = 0x00;
    1208:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE+0x3c>
		} else if (timer_circuit == Timer::Circuit::k1) {
    120e:	61 30       	cpi	r22, 0x01	; 1
    1210:	71 05       	cpc	r23, r1
    1212:	49 f4       	brne	.+18     	; 0x1226 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE+0x2e>
		    TCCR1B = 0x00;
    1214:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		    OCR1A = 0x00;
    1218:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    121c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			TIMSK1 = 0x00;
    1220:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE+0x3c>
		} else if (timer_circuit == Timer::Circuit::k2) {
    1226:	62 30       	cpi	r22, 0x02	; 2
    1228:	71 05       	cpc	r23, r1
    122a:	21 f4       	brne	.+8      	; 0x1234 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE+0x3c>
		    TCCR2B = 0x00;
    122c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
			TIMSK2 = 0x00;
    1230:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	}
	utils::Clear(timer_list_, hardware->index);
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	11 97       	sbiw	r26, 0x01	; 1
    123a:	05 81       	ldd	r16, Z+5	; 0x05
 *        The specified bit to clear.
 ********************************************************************************/
template <typename T = uint8_t>
constexpr void Clear(volatile T& reg, const uint8_t bit)  {
    static_assert(type_traits::is_unsigned<T>::value, "Invalid data type used for bit manipulation!");
    reg &= ~(1ULL << bit);
    123c:	cc ea       	ldi	r28, 0xAC	; 172
    123e:	d1 e0       	ldi	r29, 0x01	; 1
    1240:	e8 81       	ld	r30, Y
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__ashldi3>
    1256:	20 95       	com	r18
    1258:	e2 23       	and	r30, r18
    125a:	e8 83       	st	Y, r30
	hardware = nullptr;
    125c:	1d 92       	st	X+, r1
    125e:	1c 92       	st	X, r1
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	0f 91       	pop	r16
    1266:	08 95       	ret

00001268 <_ZN4yrgo6driver5TimerD1Ev>:
    InitHardware(hardware_, circuit);
	SetElapseTime_ms(elapse_time_ms);
	if (start) Start();
};

Timer::~Timer(void) {
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
    DisableHardware(hardware_, circuit_);
    126e:	6a 81       	ldd	r22, Y+2	; 0x02
    1270:	7b 81       	ldd	r23, Y+3	; 0x03
    1272:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN4yrgo6driver5Timer15DisableHardwareERPNS1_8HardwareENS1_7CircuitE>
	hardware_ = {nullptr};
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	18 82       	st	Y, r1
	circuit_ = {};
    127a:	1b 82       	std	Y+3, r1	; 0x03
    127c:	1a 82       	std	Y+2, r1	; 0x02
	max_count_ = {};
    127e:	1c 82       	std	Y+4, r1	; 0x04
    1280:	1d 82       	std	Y+5, r1	; 0x05
    1282:	1e 82       	std	Y+6, r1	; 0x06
    1284:	1f 82       	std	Y+7, r1	; 0x07
	enabled_ = {};
    1286:	18 86       	std	Y+8, r1	; 0x08
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <__vector_16>:
	}
	utils::Clear(timer_list_, hardware->index);
	hardware = nullptr;
}

ISR (TIMER0_OVF_vect) {
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    Counter::timer0++;
    12b0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN4yrgo6driver7Counter6timer0E>
    12b4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <_ZN4yrgo6driver7Counter6timer0E+0x1>
    12b8:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <_ZN4yrgo6driver7Counter6timer0E+0x2>
    12bc:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <_ZN4yrgo6driver7Counter6timer0E+0x3>
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	a1 1d       	adc	r26, r1
    12c4:	b1 1d       	adc	r27, r1
    12c6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <_ZN4yrgo6driver7Counter6timer0E>
    12ca:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <_ZN4yrgo6driver7Counter6timer0E+0x1>
    12ce:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <_ZN4yrgo6driver7Counter6timer0E+0x2>
    12d2:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <_ZN4yrgo6driver7Counter6timer0E+0x3>
	if (callback_routines[TimerIndex::k0]) {
    12d6:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <_ZN4yrgo6driver17callback_routinesE>
    12da:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <_ZN4yrgo6driver17callback_routinesE+0x1>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__vector_16+0x56>
	    callback_routines[TimerIndex::k0]();
    12e2:	09 95       	icall
	}
}
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <__vector_11>:

ISR (TIMER1_COMPA_vect) {
    1306:	1f 92       	push	r1
    1308:	0f 92       	push	r0
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	0f 92       	push	r0
    130e:	11 24       	eor	r1, r1
    1310:	2f 93       	push	r18
    1312:	3f 93       	push	r19
    1314:	4f 93       	push	r20
    1316:	5f 93       	push	r21
    1318:	6f 93       	push	r22
    131a:	7f 93       	push	r23
    131c:	8f 93       	push	r24
    131e:	9f 93       	push	r25
    1320:	af 93       	push	r26
    1322:	bf 93       	push	r27
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
    Counter::timer1++;
    1328:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZN4yrgo6driver7Counter6timer1E>
    132c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <_ZN4yrgo6driver7Counter6timer1E+0x1>
    1330:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <_ZN4yrgo6driver7Counter6timer1E+0x2>
    1334:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <_ZN4yrgo6driver7Counter6timer1E+0x3>
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	a1 1d       	adc	r26, r1
    133c:	b1 1d       	adc	r27, r1
    133e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <_ZN4yrgo6driver7Counter6timer1E>
    1342:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <_ZN4yrgo6driver7Counter6timer1E+0x1>
    1346:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <_ZN4yrgo6driver7Counter6timer1E+0x2>
    134a:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <_ZN4yrgo6driver7Counter6timer1E+0x3>
	if (callback_routines[TimerIndex::k1]) {
    134e:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <_ZN4yrgo6driver17callback_routinesE+0x2>
    1352:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <_ZN4yrgo6driver17callback_routinesE+0x3>
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	09 f0       	breq	.+2      	; 0x135c <__vector_11+0x56>
		callback_routines[TimerIndex::k1]();
    135a:	09 95       	icall
	}
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_9>:

ISR (TIMER2_OVF_vect) {
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	2f 93       	push	r18
    138a:	3f 93       	push	r19
    138c:	4f 93       	push	r20
    138e:	5f 93       	push	r21
    1390:	6f 93       	push	r22
    1392:	7f 93       	push	r23
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	af 93       	push	r26
    139a:	bf 93       	push	r27
    139c:	ef 93       	push	r30
    139e:	ff 93       	push	r31
    Counter::timer2++;
    13a0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN4yrgo6driver7Counter6timer2E>
    13a4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN4yrgo6driver7Counter6timer2E+0x1>
    13a8:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <_ZN4yrgo6driver7Counter6timer2E+0x2>
    13ac:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <_ZN4yrgo6driver7Counter6timer2E+0x3>
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	a1 1d       	adc	r26, r1
    13b4:	b1 1d       	adc	r27, r1
    13b6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_ZN4yrgo6driver7Counter6timer2E>
    13ba:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <_ZN4yrgo6driver7Counter6timer2E+0x1>
    13be:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <_ZN4yrgo6driver7Counter6timer2E+0x2>
    13c2:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <_ZN4yrgo6driver7Counter6timer2E+0x3>
	if (callback_routines[TimerIndex::k2]) {
    13c6:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <_ZN4yrgo6driver17callback_routinesE+0x4>
    13ca:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <_ZN4yrgo6driver17callback_routinesE+0x5>
    13ce:	30 97       	sbiw	r30, 0x00	; 0
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__vector_9+0x56>
		callback_routines[TimerIndex::k2]();
    13d2:	09 95       	icall
	}
}
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	0f 90       	pop	r0
    13f2:	1f 90       	pop	r1
    13f4:	18 95       	reti

000013f6 <_ZN4yrgo6driver8watchdog4InitENS1_7TimeoutE>:
}

/********************************************************************************
 * @brief Enables interrupts globally.
 ********************************************************************************/
inline void GlobalInterruptEnable(void) { asm("SEI"); }
    13f6:	f8 94       	cli
    13f8:	e0 e6       	ldi	r30, 0x60	; 96
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	90 81       	ld	r25, Z
    13fe:	90 61       	ori	r25, 0x10	; 16
    1400:	90 83       	st	Z, r25
    1402:	90 81       	ld	r25, Z
    1404:	98 60       	ori	r25, 0x08	; 8
    1406:	90 83       	st	Z, r25
    1408:	80 83       	st	Z, r24
    140a:	78 94       	sei
    140c:	08 95       	ret

0000140e <_ZN4yrgo6driver8watchdog5ResetEv>:
    140e:	f8 94       	cli
    1410:	a8 95       	wdr
    1412:	84 b7       	in	r24, 0x34	; 52
    1414:	87 7f       	andi	r24, 0xF7	; 247
    1416:	84 bf       	out	0x34, r24	; 52
    1418:	78 94       	sei
    141a:	08 95       	ret

0000141c <_ZN4yrgo6driver8watchdog17EnableSystemResetEv>:
    141c:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN4yrgo6driver8watchdog5ResetEv>
    1420:	f8 94       	cli
    1422:	e0 e6       	ldi	r30, 0x60	; 96
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	80 83       	st	Z, r24
    142c:	80 81       	ld	r24, Z
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	80 83       	st	Z, r24
    1432:	80 81       	ld	r24, Z
    1434:	88 60       	ori	r24, 0x08	; 8
    1436:	80 83       	st	Z, r24
    1438:	78 94       	sei
    143a:	08 95       	ret

0000143c <_ZN4yrgo6driver8watchdog15EnableInterruptEPFvvE>:
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
    1442:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN4yrgo6driver8watchdog5ResetEv>
    1446:	20 97       	sbiw	r28, 0x00	; 0
    1448:	21 f0       	breq	.+8      	; 0x1452 <_ZN4yrgo6driver8watchdog15EnableInterruptEPFvvE+0x16>
    144a:	d0 93 ae 01 	sts	0x01AE, r29	; 0x8001ae <_ZN4yrgo6driver8watchdog12_GLOBAL__N_18callbackE+0x1>
    144e:	c0 93 ad 01 	sts	0x01AD, r28	; 0x8001ad <_ZN4yrgo6driver8watchdog12_GLOBAL__N_18callbackE>
    1452:	f8 94       	cli
    1454:	e0 e6       	ldi	r30, 0x60	; 96
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 61       	ori	r24, 0x10	; 16
    145c:	80 83       	st	Z, r24
    145e:	80 81       	ld	r24, Z
    1460:	88 60       	ori	r24, 0x08	; 8
    1462:	80 83       	st	Z, r24
    1464:	80 81       	ld	r24, Z
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	80 83       	st	Z, r24
    146a:	78 94       	sei
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <__vector_6>:
   utils::Set(WDTCSR, WDCE, WDE);
   utils::Clear(WDTCSR, WDIE);
   utils::GlobalInterruptEnable();
}

ISR (WDT_vect) {
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
    EnableInterrupt();
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 1e 0a 	call	0x143c	; 0x143c <_ZN4yrgo6driver8watchdog15EnableInterruptEPFvvE>
    if (callback) {
    149c:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <_ZN4yrgo6driver8watchdog12_GLOBAL__N_18callbackE>
    14a0:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <_ZN4yrgo6driver8watchdog12_GLOBAL__N_18callbackE+0x1>
    14a4:	30 97       	sbiw	r30, 0x00	; 0
    14a6:	09 f0       	breq	.+2      	; 0x14aa <__vector_6+0x38>
        callback();
    14a8:	09 95       	icall
    }
}
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	0f 90       	pop	r0
    14c8:	1f 90       	pop	r1
    14ca:	18 95       	reti

000014cc <__subsf3>:
    14cc:	50 58       	subi	r21, 0x80	; 128

000014ce <__addsf3>:
    14ce:	bb 27       	eor	r27, r27
    14d0:	aa 27       	eor	r26, r26
    14d2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__addsf3x>
    14d6:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    14da:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    14de:	38 f0       	brcs	.+14     	; 0x14ee <__addsf3+0x20>
    14e0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__addsf3+0x20>
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__addsf3+0x28>
    14e8:	9f 3f       	cpi	r25, 0xFF	; 255
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <__addsf3+0x24>
    14ec:	26 f4       	brtc	.+8      	; 0x14f6 <__addsf3+0x28>
    14ee:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    14f2:	0e f4       	brtc	.+2      	; 0x14f6 <__addsf3+0x28>
    14f4:	e0 95       	com	r30
    14f6:	e7 fb       	bst	r30, 7
    14f8:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>

000014fc <__addsf3x>:
    14fc:	e9 2f       	mov	r30, r25
    14fe:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    1502:	58 f3       	brcs	.-42     	; 0x14da <__addsf3+0xc>
    1504:	ba 17       	cp	r27, r26
    1506:	62 07       	cpc	r22, r18
    1508:	73 07       	cpc	r23, r19
    150a:	84 07       	cpc	r24, r20
    150c:	95 07       	cpc	r25, r21
    150e:	20 f0       	brcs	.+8      	; 0x1518 <__addsf3x+0x1c>
    1510:	79 f4       	brne	.+30     	; 0x1530 <__addsf3x+0x34>
    1512:	a6 f5       	brtc	.+104    	; 0x157c <__addsf3x+0x80>
    1514:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_zero>
    1518:	0e f4       	brtc	.+2      	; 0x151c <__addsf3x+0x20>
    151a:	e0 95       	com	r30
    151c:	0b 2e       	mov	r0, r27
    151e:	ba 2f       	mov	r27, r26
    1520:	a0 2d       	mov	r26, r0
    1522:	0b 01       	movw	r0, r22
    1524:	b9 01       	movw	r22, r18
    1526:	90 01       	movw	r18, r0
    1528:	0c 01       	movw	r0, r24
    152a:	ca 01       	movw	r24, r20
    152c:	a0 01       	movw	r20, r0
    152e:	11 24       	eor	r1, r1
    1530:	ff 27       	eor	r31, r31
    1532:	59 1b       	sub	r21, r25
    1534:	99 f0       	breq	.+38     	; 0x155c <__addsf3x+0x60>
    1536:	59 3f       	cpi	r21, 0xF9	; 249
    1538:	50 f4       	brcc	.+20     	; 0x154e <__addsf3x+0x52>
    153a:	50 3e       	cpi	r21, 0xE0	; 224
    153c:	68 f1       	brcs	.+90     	; 0x1598 <__addsf3x+0x9c>
    153e:	1a 16       	cp	r1, r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	a2 2f       	mov	r26, r18
    1544:	23 2f       	mov	r18, r19
    1546:	34 2f       	mov	r19, r20
    1548:	44 27       	eor	r20, r20
    154a:	58 5f       	subi	r21, 0xF8	; 248
    154c:	f3 cf       	rjmp	.-26     	; 0x1534 <__addsf3x+0x38>
    154e:	46 95       	lsr	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
    1554:	a7 95       	ror	r26
    1556:	f0 40       	sbci	r31, 0x00	; 0
    1558:	53 95       	inc	r21
    155a:	c9 f7       	brne	.-14     	; 0x154e <__addsf3x+0x52>
    155c:	7e f4       	brtc	.+30     	; 0x157c <__addsf3x+0x80>
    155e:	1f 16       	cp	r1, r31
    1560:	ba 0b       	sbc	r27, r26
    1562:	62 0b       	sbc	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	ba f0       	brmi	.+46     	; 0x1598 <__addsf3x+0x9c>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	a1 f0       	breq	.+40     	; 0x1596 <__addsf3x+0x9a>
    156e:	ff 0f       	add	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	c2 f7       	brpl	.-16     	; 0x156a <__addsf3x+0x6e>
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <__addsf3x+0x9c>
    157c:	ba 0f       	add	r27, r26
    157e:	62 1f       	adc	r22, r18
    1580:	73 1f       	adc	r23, r19
    1582:	84 1f       	adc	r24, r20
    1584:	48 f4       	brcc	.+18     	; 0x1598 <__addsf3x+0x9c>
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f7 95       	ror	r31
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__addsf3x+0x9a>
    1594:	b0 cf       	rjmp	.-160    	; 0x14f6 <__addsf3+0x28>
    1596:	93 95       	inc	r25
    1598:	88 0f       	add	r24, r24
    159a:	08 f0       	brcs	.+2      	; 0x159e <__addsf3x+0xa2>
    159c:	99 27       	eor	r25, r25
    159e:	ee 0f       	add	r30, r30
    15a0:	97 95       	ror	r25
    15a2:	87 95       	ror	r24
    15a4:	08 95       	ret

000015a6 <__cmpsf2>:
    15a6:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fp_cmp>
    15aa:	08 f4       	brcc	.+2      	; 0x15ae <__cmpsf2+0x8>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 95       	ret

000015b0 <__divsf3>:
    15b0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__divsf3x>
    15b4:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    15b8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    15bc:	58 f0       	brcs	.+22     	; 0x15d4 <__divsf3+0x24>
    15be:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    15c2:	40 f0       	brcs	.+16     	; 0x15d4 <__divsf3+0x24>
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <__divsf3+0x20>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	29 f0       	breq	.+10     	; 0x15d4 <__divsf3+0x24>
    15ca:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    15ce:	51 11       	cpse	r21, r1
    15d0:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    15d4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>

000015d8 <__divsf3x>:
    15d8:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    15dc:	68 f3       	brcs	.-38     	; 0x15b8 <__divsf3+0x8>

000015de <__divsf3_pse>:
    15de:	99 23       	and	r25, r25
    15e0:	b1 f3       	breq	.-20     	; 0x15ce <__divsf3+0x1e>
    15e2:	55 23       	and	r21, r21
    15e4:	91 f3       	breq	.-28     	; 0x15ca <__divsf3+0x1a>
    15e6:	95 1b       	sub	r25, r21
    15e8:	55 0b       	sbc	r21, r21
    15ea:	bb 27       	eor	r27, r27
    15ec:	aa 27       	eor	r26, r26
    15ee:	62 17       	cp	r22, r18
    15f0:	73 07       	cpc	r23, r19
    15f2:	84 07       	cpc	r24, r20
    15f4:	38 f0       	brcs	.+14     	; 0x1604 <__divsf3_pse+0x26>
    15f6:	9f 5f       	subi	r25, 0xFF	; 255
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	44 1f       	adc	r20, r20
    1600:	aa 1f       	adc	r26, r26
    1602:	a9 f3       	breq	.-22     	; 0x15ee <__divsf3_pse+0x10>
    1604:	35 d0       	rcall	.+106    	; 0x1670 <__divsf3_pse+0x92>
    1606:	0e 2e       	mov	r0, r30
    1608:	3a f0       	brmi	.+14     	; 0x1618 <__divsf3_pse+0x3a>
    160a:	e0 e8       	ldi	r30, 0x80	; 128
    160c:	32 d0       	rcall	.+100    	; 0x1672 <__divsf3_pse+0x94>
    160e:	91 50       	subi	r25, 0x01	; 1
    1610:	50 40       	sbci	r21, 0x00	; 0
    1612:	e6 95       	lsr	r30
    1614:	00 1c       	adc	r0, r0
    1616:	ca f7       	brpl	.-14     	; 0x160a <__divsf3_pse+0x2c>
    1618:	2b d0       	rcall	.+86     	; 0x1670 <__divsf3_pse+0x92>
    161a:	fe 2f       	mov	r31, r30
    161c:	29 d0       	rcall	.+82     	; 0x1670 <__divsf3_pse+0x92>
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	88 1f       	adc	r24, r24
    1624:	bb 1f       	adc	r27, r27
    1626:	26 17       	cp	r18, r22
    1628:	37 07       	cpc	r19, r23
    162a:	48 07       	cpc	r20, r24
    162c:	ab 07       	cpc	r26, r27
    162e:	b0 e8       	ldi	r27, 0x80	; 128
    1630:	09 f0       	breq	.+2      	; 0x1634 <__divsf3_pse+0x56>
    1632:	bb 0b       	sbc	r27, r27
    1634:	80 2d       	mov	r24, r0
    1636:	bf 01       	movw	r22, r30
    1638:	ff 27       	eor	r31, r31
    163a:	93 58       	subi	r25, 0x83	; 131
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	3a f0       	brmi	.+14     	; 0x164e <__divsf3_pse+0x70>
    1640:	9e 3f       	cpi	r25, 0xFE	; 254
    1642:	51 05       	cpc	r21, r1
    1644:	78 f0       	brcs	.+30     	; 0x1664 <__divsf3_pse+0x86>
    1646:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    164a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	e4 f3       	brlt	.-8      	; 0x164a <__divsf3_pse+0x6c>
    1652:	98 3e       	cpi	r25, 0xE8	; 232
    1654:	d4 f3       	brlt	.-12     	; 0x164a <__divsf3_pse+0x6c>
    1656:	86 95       	lsr	r24
    1658:	77 95       	ror	r23
    165a:	67 95       	ror	r22
    165c:	b7 95       	ror	r27
    165e:	f7 95       	ror	r31
    1660:	9f 5f       	subi	r25, 0xFF	; 255
    1662:	c9 f7       	brne	.-14     	; 0x1656 <__divsf3_pse+0x78>
    1664:	88 0f       	add	r24, r24
    1666:	91 1d       	adc	r25, r1
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret
    1670:	e1 e0       	ldi	r30, 0x01	; 1
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	bb 1f       	adc	r27, r27
    167a:	62 17       	cp	r22, r18
    167c:	73 07       	cpc	r23, r19
    167e:	84 07       	cpc	r24, r20
    1680:	ba 07       	cpc	r27, r26
    1682:	20 f0       	brcs	.+8      	; 0x168c <__divsf3_pse+0xae>
    1684:	62 1b       	sub	r22, r18
    1686:	73 0b       	sbc	r23, r19
    1688:	84 0b       	sbc	r24, r20
    168a:	ba 0b       	sbc	r27, r26
    168c:	ee 1f       	adc	r30, r30
    168e:	88 f7       	brcc	.-30     	; 0x1672 <__divsf3_pse+0x94>
    1690:	e0 95       	com	r30
    1692:	08 95       	ret

00001694 <__fixsfsi>:
    1694:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fixunssfsi>
    1698:	68 94       	set
    169a:	b1 11       	cpse	r27, r1
    169c:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    16a0:	08 95       	ret

000016a2 <__fixunssfsi>:
    16a2:	0e 94 11 0c 	call	0x1822	; 0x1822 <__fp_splitA>
    16a6:	88 f0       	brcs	.+34     	; 0x16ca <__fixunssfsi+0x28>
    16a8:	9f 57       	subi	r25, 0x7F	; 127
    16aa:	98 f0       	brcs	.+38     	; 0x16d2 <__fixunssfsi+0x30>
    16ac:	b9 2f       	mov	r27, r25
    16ae:	99 27       	eor	r25, r25
    16b0:	b7 51       	subi	r27, 0x17	; 23
    16b2:	b0 f0       	brcs	.+44     	; 0x16e0 <__fixunssfsi+0x3e>
    16b4:	e1 f0       	breq	.+56     	; 0x16ee <__fixunssfsi+0x4c>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	1a f0       	brmi	.+6      	; 0x16c6 <__fixunssfsi+0x24>
    16c0:	ba 95       	dec	r27
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__fixunssfsi+0x14>
    16c4:	14 c0       	rjmp	.+40     	; 0x16ee <__fixunssfsi+0x4c>
    16c6:	b1 30       	cpi	r27, 0x01	; 1
    16c8:	91 f0       	breq	.+36     	; 0x16ee <__fixunssfsi+0x4c>
    16ca:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__fp_zero>
    16ce:	b1 e0       	ldi	r27, 0x01	; 1
    16d0:	08 95       	ret
    16d2:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__fp_zero>
    16d6:	67 2f       	mov	r22, r23
    16d8:	78 2f       	mov	r23, r24
    16da:	88 27       	eor	r24, r24
    16dc:	b8 5f       	subi	r27, 0xF8	; 248
    16de:	39 f0       	breq	.+14     	; 0x16ee <__fixunssfsi+0x4c>
    16e0:	b9 3f       	cpi	r27, 0xF9	; 249
    16e2:	cc f3       	brlt	.-14     	; 0x16d6 <__fixunssfsi+0x34>
    16e4:	86 95       	lsr	r24
    16e6:	77 95       	ror	r23
    16e8:	67 95       	ror	r22
    16ea:	b3 95       	inc	r27
    16ec:	d9 f7       	brne	.-10     	; 0x16e4 <__fixunssfsi+0x42>
    16ee:	3e f4       	brtc	.+14     	; 0x16fe <__fixunssfsi+0x5c>
    16f0:	90 95       	com	r25
    16f2:	80 95       	com	r24
    16f4:	70 95       	com	r23
    16f6:	61 95       	neg	r22
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__floatunsisf>:
    1700:	e8 94       	clt
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <__floatsisf+0x12>

00001704 <__floatsisf>:
    1704:	97 fb       	bst	r25, 7
    1706:	3e f4       	brtc	.+14     	; 0x1716 <__floatsisf+0x12>
    1708:	90 95       	com	r25
    170a:	80 95       	com	r24
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	99 23       	and	r25, r25
    1718:	a9 f0       	breq	.+42     	; 0x1744 <__floatsisf+0x40>
    171a:	f9 2f       	mov	r31, r25
    171c:	96 e9       	ldi	r25, 0x96	; 150
    171e:	bb 27       	eor	r27, r27
    1720:	93 95       	inc	r25
    1722:	f6 95       	lsr	r31
    1724:	87 95       	ror	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b7 95       	ror	r27
    172c:	f1 11       	cpse	r31, r1
    172e:	f8 cf       	rjmp	.-16     	; 0x1720 <__floatsisf+0x1c>
    1730:	fa f4       	brpl	.+62     	; 0x1770 <__floatsisf+0x6c>
    1732:	bb 0f       	add	r27, r27
    1734:	11 f4       	brne	.+4      	; 0x173a <__floatsisf+0x36>
    1736:	60 ff       	sbrs	r22, 0
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <__floatsisf+0x6c>
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	8f 4f       	sbci	r24, 0xFF	; 255
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	16 c0       	rjmp	.+44     	; 0x1770 <__floatsisf+0x6c>
    1744:	88 23       	and	r24, r24
    1746:	11 f0       	breq	.+4      	; 0x174c <__floatsisf+0x48>
    1748:	96 e9       	ldi	r25, 0x96	; 150
    174a:	11 c0       	rjmp	.+34     	; 0x176e <__floatsisf+0x6a>
    174c:	77 23       	and	r23, r23
    174e:	21 f0       	breq	.+8      	; 0x1758 <__floatsisf+0x54>
    1750:	9e e8       	ldi	r25, 0x8E	; 142
    1752:	87 2f       	mov	r24, r23
    1754:	76 2f       	mov	r23, r22
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <__floatsisf+0x5e>
    1758:	66 23       	and	r22, r22
    175a:	71 f0       	breq	.+28     	; 0x1778 <__floatsisf+0x74>
    175c:	96 e8       	ldi	r25, 0x86	; 134
    175e:	86 2f       	mov	r24, r22
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	2a f0       	brmi	.+10     	; 0x1770 <__floatsisf+0x6c>
    1766:	9a 95       	dec	r25
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	da f7       	brpl	.-10     	; 0x1766 <__floatsisf+0x62>
    1770:	88 0f       	add	r24, r24
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret

0000177a <__fp_cmp>:
    177a:	99 0f       	add	r25, r25
    177c:	00 08       	sbc	r0, r0
    177e:	55 0f       	add	r21, r21
    1780:	aa 0b       	sbc	r26, r26
    1782:	e0 e8       	ldi	r30, 0x80	; 128
    1784:	fe ef       	ldi	r31, 0xFE	; 254
    1786:	16 16       	cp	r1, r22
    1788:	17 06       	cpc	r1, r23
    178a:	e8 07       	cpc	r30, r24
    178c:	f9 07       	cpc	r31, r25
    178e:	c0 f0       	brcs	.+48     	; 0x17c0 <__fp_cmp+0x46>
    1790:	12 16       	cp	r1, r18
    1792:	13 06       	cpc	r1, r19
    1794:	e4 07       	cpc	r30, r20
    1796:	f5 07       	cpc	r31, r21
    1798:	98 f0       	brcs	.+38     	; 0x17c0 <__fp_cmp+0x46>
    179a:	62 1b       	sub	r22, r18
    179c:	73 0b       	sbc	r23, r19
    179e:	84 0b       	sbc	r24, r20
    17a0:	95 0b       	sbc	r25, r21
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <__fp_cmp+0x38>
    17a4:	0a 26       	eor	r0, r26
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <__fp_cmp+0x46>
    17a8:	23 2b       	or	r18, r19
    17aa:	24 2b       	or	r18, r20
    17ac:	25 2b       	or	r18, r21
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <__fp_cmp+0x3e>
    17b0:	08 95       	ret
    17b2:	0a 26       	eor	r0, r26
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <__fp_cmp+0x3e>
    17b6:	a1 40       	sbci	r26, 0x01	; 1
    17b8:	a6 95       	lsr	r26
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	81 1d       	adc	r24, r1
    17be:	81 1d       	adc	r24, r1
    17c0:	08 95       	ret

000017c2 <__fp_inf>:
    17c2:	97 f9       	bld	r25, 7
    17c4:	9f 67       	ori	r25, 0x7F	; 127
    17c6:	80 e8       	ldi	r24, 0x80	; 128
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	08 95       	ret

000017ce <__fp_nan>:
    17ce:	9f ef       	ldi	r25, 0xFF	; 255
    17d0:	80 ec       	ldi	r24, 0xC0	; 192
    17d2:	08 95       	ret

000017d4 <__fp_pscA>:
    17d4:	00 24       	eor	r0, r0
    17d6:	0a 94       	dec	r0
    17d8:	16 16       	cp	r1, r22
    17da:	17 06       	cpc	r1, r23
    17dc:	18 06       	cpc	r1, r24
    17de:	09 06       	cpc	r0, r25
    17e0:	08 95       	ret

000017e2 <__fp_pscB>:
    17e2:	00 24       	eor	r0, r0
    17e4:	0a 94       	dec	r0
    17e6:	12 16       	cp	r1, r18
    17e8:	13 06       	cpc	r1, r19
    17ea:	14 06       	cpc	r1, r20
    17ec:	05 06       	cpc	r0, r21
    17ee:	08 95       	ret

000017f0 <__fp_round>:
    17f0:	09 2e       	mov	r0, r25
    17f2:	03 94       	inc	r0
    17f4:	00 0c       	add	r0, r0
    17f6:	11 f4       	brne	.+4      	; 0x17fc <__fp_round+0xc>
    17f8:	88 23       	and	r24, r24
    17fa:	52 f0       	brmi	.+20     	; 0x1810 <__fp_round+0x20>
    17fc:	bb 0f       	add	r27, r27
    17fe:	40 f4       	brcc	.+16     	; 0x1810 <__fp_round+0x20>
    1800:	bf 2b       	or	r27, r31
    1802:	11 f4       	brne	.+4      	; 0x1808 <__fp_round+0x18>
    1804:	60 ff       	sbrs	r22, 0
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <__fp_round+0x20>
    1808:	6f 5f       	subi	r22, 0xFF	; 255
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	8f 4f       	sbci	r24, 0xFF	; 255
    180e:	9f 4f       	sbci	r25, 0xFF	; 255
    1810:	08 95       	ret

00001812 <__fp_split3>:
    1812:	57 fd       	sbrc	r21, 7
    1814:	90 58       	subi	r25, 0x80	; 128
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	59 f0       	breq	.+22     	; 0x1832 <__fp_splitA+0x10>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	71 f0       	breq	.+28     	; 0x183c <__fp_splitA+0x1a>
    1820:	47 95       	ror	r20

00001822 <__fp_splitA>:
    1822:	88 0f       	add	r24, r24
    1824:	97 fb       	bst	r25, 7
    1826:	99 1f       	adc	r25, r25
    1828:	61 f0       	breq	.+24     	; 0x1842 <__fp_splitA+0x20>
    182a:	9f 3f       	cpi	r25, 0xFF	; 255
    182c:	79 f0       	breq	.+30     	; 0x184c <__fp_splitA+0x2a>
    182e:	87 95       	ror	r24
    1830:	08 95       	ret
    1832:	12 16       	cp	r1, r18
    1834:	13 06       	cpc	r1, r19
    1836:	14 06       	cpc	r1, r20
    1838:	55 1f       	adc	r21, r21
    183a:	f2 cf       	rjmp	.-28     	; 0x1820 <__fp_split3+0xe>
    183c:	46 95       	lsr	r20
    183e:	f1 df       	rcall	.-30     	; 0x1822 <__fp_splitA>
    1840:	08 c0       	rjmp	.+16     	; 0x1852 <__fp_splitA+0x30>
    1842:	16 16       	cp	r1, r22
    1844:	17 06       	cpc	r1, r23
    1846:	18 06       	cpc	r1, r24
    1848:	99 1f       	adc	r25, r25
    184a:	f1 cf       	rjmp	.-30     	; 0x182e <__fp_splitA+0xc>
    184c:	86 95       	lsr	r24
    184e:	71 05       	cpc	r23, r1
    1850:	61 05       	cpc	r22, r1
    1852:	08 94       	sec
    1854:	08 95       	ret

00001856 <__fp_zero>:
    1856:	e8 94       	clt

00001858 <__fp_szero>:
    1858:	bb 27       	eor	r27, r27
    185a:	66 27       	eor	r22, r22
    185c:	77 27       	eor	r23, r23
    185e:	cb 01       	movw	r24, r22
    1860:	97 f9       	bld	r25, 7
    1862:	08 95       	ret

00001864 <__mulsf3>:
    1864:	0e 94 45 0c 	call	0x188a	; 0x188a <__mulsf3x>
    1868:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__fp_round>
    186c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__fp_pscA>
    1870:	38 f0       	brcs	.+14     	; 0x1880 <__mulsf3+0x1c>
    1872:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fp_pscB>
    1876:	20 f0       	brcs	.+8      	; 0x1880 <__mulsf3+0x1c>
    1878:	95 23       	and	r25, r21
    187a:	11 f0       	breq	.+4      	; 0x1880 <__mulsf3+0x1c>
    187c:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    1880:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_nan>
    1884:	11 24       	eor	r1, r1
    1886:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>

0000188a <__mulsf3x>:
    188a:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_split3>
    188e:	70 f3       	brcs	.-36     	; 0x186c <__mulsf3+0x8>

00001890 <__mulsf3_pse>:
    1890:	95 9f       	mul	r25, r21
    1892:	c1 f3       	breq	.-16     	; 0x1884 <__mulsf3+0x20>
    1894:	95 0f       	add	r25, r21
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	55 1f       	adc	r21, r21
    189a:	62 9f       	mul	r22, r18
    189c:	f0 01       	movw	r30, r0
    189e:	72 9f       	mul	r23, r18
    18a0:	bb 27       	eor	r27, r27
    18a2:	f0 0d       	add	r31, r0
    18a4:	b1 1d       	adc	r27, r1
    18a6:	63 9f       	mul	r22, r19
    18a8:	aa 27       	eor	r26, r26
    18aa:	f0 0d       	add	r31, r0
    18ac:	b1 1d       	adc	r27, r1
    18ae:	aa 1f       	adc	r26, r26
    18b0:	64 9f       	mul	r22, r20
    18b2:	66 27       	eor	r22, r22
    18b4:	b0 0d       	add	r27, r0
    18b6:	a1 1d       	adc	r26, r1
    18b8:	66 1f       	adc	r22, r22
    18ba:	82 9f       	mul	r24, r18
    18bc:	22 27       	eor	r18, r18
    18be:	b0 0d       	add	r27, r0
    18c0:	a1 1d       	adc	r26, r1
    18c2:	62 1f       	adc	r22, r18
    18c4:	73 9f       	mul	r23, r19
    18c6:	b0 0d       	add	r27, r0
    18c8:	a1 1d       	adc	r26, r1
    18ca:	62 1f       	adc	r22, r18
    18cc:	83 9f       	mul	r24, r19
    18ce:	a0 0d       	add	r26, r0
    18d0:	61 1d       	adc	r22, r1
    18d2:	22 1f       	adc	r18, r18
    18d4:	74 9f       	mul	r23, r20
    18d6:	33 27       	eor	r19, r19
    18d8:	a0 0d       	add	r26, r0
    18da:	61 1d       	adc	r22, r1
    18dc:	23 1f       	adc	r18, r19
    18de:	84 9f       	mul	r24, r20
    18e0:	60 0d       	add	r22, r0
    18e2:	21 1d       	adc	r18, r1
    18e4:	82 2f       	mov	r24, r18
    18e6:	76 2f       	mov	r23, r22
    18e8:	6a 2f       	mov	r22, r26
    18ea:	11 24       	eor	r1, r1
    18ec:	9f 57       	subi	r25, 0x7F	; 127
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	9a f0       	brmi	.+38     	; 0x1918 <__mulsf3_pse+0x88>
    18f2:	f1 f0       	breq	.+60     	; 0x1930 <__mulsf3_pse+0xa0>
    18f4:	88 23       	and	r24, r24
    18f6:	4a f0       	brmi	.+18     	; 0x190a <__mulsf3_pse+0x7a>
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	bb 1f       	adc	r27, r27
    18fe:	66 1f       	adc	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	88 1f       	adc	r24, r24
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	50 40       	sbci	r21, 0x00	; 0
    1908:	a9 f7       	brne	.-22     	; 0x18f4 <__mulsf3_pse+0x64>
    190a:	9e 3f       	cpi	r25, 0xFE	; 254
    190c:	51 05       	cpc	r21, r1
    190e:	80 f0       	brcs	.+32     	; 0x1930 <__mulsf3_pse+0xa0>
    1910:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__fp_inf>
    1914:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_szero>
    1918:	5f 3f       	cpi	r21, 0xFF	; 255
    191a:	e4 f3       	brlt	.-8      	; 0x1914 <__mulsf3_pse+0x84>
    191c:	98 3e       	cpi	r25, 0xE8	; 232
    191e:	d4 f3       	brlt	.-12     	; 0x1914 <__mulsf3_pse+0x84>
    1920:	86 95       	lsr	r24
    1922:	77 95       	ror	r23
    1924:	67 95       	ror	r22
    1926:	b7 95       	ror	r27
    1928:	f7 95       	ror	r31
    192a:	e7 95       	ror	r30
    192c:	9f 5f       	subi	r25, 0xFF	; 255
    192e:	c1 f7       	brne	.-16     	; 0x1920 <__mulsf3_pse+0x90>
    1930:	fe 2b       	or	r31, r30
    1932:	88 0f       	add	r24, r24
    1934:	91 1d       	adc	r25, r1
    1936:	96 95       	lsr	r25
    1938:	87 95       	ror	r24
    193a:	97 f9       	bld	r25, 7
    193c:	08 95       	ret

0000193e <__udivmodhi4>:
    193e:	aa 1b       	sub	r26, r26
    1940:	bb 1b       	sub	r27, r27
    1942:	51 e1       	ldi	r21, 0x11	; 17
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <__udivmodhi4_ep>

00001946 <__udivmodhi4_loop>:
    1946:	aa 1f       	adc	r26, r26
    1948:	bb 1f       	adc	r27, r27
    194a:	a6 17       	cp	r26, r22
    194c:	b7 07       	cpc	r27, r23
    194e:	10 f0       	brcs	.+4      	; 0x1954 <__udivmodhi4_ep>
    1950:	a6 1b       	sub	r26, r22
    1952:	b7 0b       	sbc	r27, r23

00001954 <__udivmodhi4_ep>:
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	5a 95       	dec	r21
    195a:	a9 f7       	brne	.-22     	; 0x1946 <__udivmodhi4_loop>
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	08 95       	ret

00001966 <__ashldi3>:
    1966:	0f 93       	push	r16
    1968:	08 30       	cpi	r16, 0x08	; 8
    196a:	90 f0       	brcs	.+36     	; 0x1990 <__ashldi3+0x2a>
    196c:	98 2f       	mov	r25, r24
    196e:	87 2f       	mov	r24, r23
    1970:	76 2f       	mov	r23, r22
    1972:	65 2f       	mov	r22, r21
    1974:	54 2f       	mov	r21, r20
    1976:	43 2f       	mov	r20, r19
    1978:	32 2f       	mov	r19, r18
    197a:	22 27       	eor	r18, r18
    197c:	08 50       	subi	r16, 0x08	; 8
    197e:	f4 cf       	rjmp	.-24     	; 0x1968 <__ashldi3+0x2>
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	44 1f       	adc	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	66 1f       	adc	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 95       	dec	r16
    1992:	b2 f7       	brpl	.-20     	; 0x1980 <__ashldi3+0x1a>
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <__ashrdi3>:
    1998:	97 fb       	bst	r25, 7
    199a:	10 f8       	bld	r1, 0

0000199c <__lshrdi3>:
    199c:	16 94       	lsr	r1
    199e:	00 08       	sbc	r0, r0
    19a0:	0f 93       	push	r16
    19a2:	08 30       	cpi	r16, 0x08	; 8
    19a4:	98 f0       	brcs	.+38     	; 0x19cc <__lshrdi3+0x30>
    19a6:	08 50       	subi	r16, 0x08	; 8
    19a8:	23 2f       	mov	r18, r19
    19aa:	34 2f       	mov	r19, r20
    19ac:	45 2f       	mov	r20, r21
    19ae:	56 2f       	mov	r21, r22
    19b0:	67 2f       	mov	r22, r23
    19b2:	78 2f       	mov	r23, r24
    19b4:	89 2f       	mov	r24, r25
    19b6:	90 2d       	mov	r25, r0
    19b8:	f4 cf       	rjmp	.-24     	; 0x19a2 <__lshrdi3+0x6>
    19ba:	05 94       	asr	r0
    19bc:	97 95       	ror	r25
    19be:	87 95       	ror	r24
    19c0:	77 95       	ror	r23
    19c2:	67 95       	ror	r22
    19c4:	57 95       	ror	r21
    19c6:	47 95       	ror	r20
    19c8:	37 95       	ror	r19
    19ca:	27 95       	ror	r18
    19cc:	0a 95       	dec	r16
    19ce:	aa f7       	brpl	.-22     	; 0x19ba <__lshrdi3+0x1e>
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <__cmpdi2_s8>:
    19d4:	00 24       	eor	r0, r0
    19d6:	a7 fd       	sbrc	r26, 7
    19d8:	00 94       	com	r0
    19da:	2a 17       	cp	r18, r26
    19dc:	30 05       	cpc	r19, r0
    19de:	40 05       	cpc	r20, r0
    19e0:	50 05       	cpc	r21, r0
    19e2:	60 05       	cpc	r22, r0
    19e4:	70 05       	cpc	r23, r0
    19e6:	80 05       	cpc	r24, r0
    19e8:	90 05       	cpc	r25, r0
    19ea:	08 95       	ret

000019ec <__tablejump2__>:
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	05 90       	lpm	r0, Z+
    19f2:	f4 91       	lpm	r31, Z
    19f4:	e0 2d       	mov	r30, r0
    19f6:	09 94       	ijmp

000019f8 <malloc>:
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	91 05       	cpc	r25, r1
    1a04:	10 f4       	brcc	.+4      	; 0x1a0a <malloc+0x12>
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <__flp>
    1a0e:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <__flp+0x1>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	a0 e0       	ldi	r26, 0x00	; 0
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	19 f1       	breq	.+70     	; 0x1a64 <malloc+0x6c>
    1a1e:	40 81       	ld	r20, Z
    1a20:	51 81       	ldd	r21, Z+1	; 0x01
    1a22:	02 81       	ldd	r16, Z+2	; 0x02
    1a24:	13 81       	ldd	r17, Z+3	; 0x03
    1a26:	48 17       	cp	r20, r24
    1a28:	59 07       	cpc	r21, r25
    1a2a:	c8 f0       	brcs	.+50     	; 0x1a5e <malloc+0x66>
    1a2c:	84 17       	cp	r24, r20
    1a2e:	95 07       	cpc	r25, r21
    1a30:	69 f4       	brne	.+26     	; 0x1a4c <malloc+0x54>
    1a32:	10 97       	sbiw	r26, 0x00	; 0
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <malloc+0x4a>
    1a36:	12 96       	adiw	r26, 0x02	; 2
    1a38:	0c 93       	st	X, r16
    1a3a:	12 97       	sbiw	r26, 0x02	; 2
    1a3c:	13 96       	adiw	r26, 0x03	; 3
    1a3e:	1c 93       	st	X, r17
    1a40:	27 c0       	rjmp	.+78     	; 0x1a90 <malloc+0x98>
    1a42:	00 93 b1 01 	sts	0x01B1, r16	; 0x8001b1 <__flp>
    1a46:	10 93 b2 01 	sts	0x01B2, r17	; 0x8001b2 <__flp+0x1>
    1a4a:	22 c0       	rjmp	.+68     	; 0x1a90 <malloc+0x98>
    1a4c:	21 15       	cp	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <malloc+0x60>
    1a52:	42 17       	cp	r20, r18
    1a54:	53 07       	cpc	r21, r19
    1a56:	18 f4       	brcc	.+6      	; 0x1a5e <malloc+0x66>
    1a58:	9a 01       	movw	r18, r20
    1a5a:	bd 01       	movw	r22, r26
    1a5c:	ef 01       	movw	r28, r30
    1a5e:	df 01       	movw	r26, r30
    1a60:	f8 01       	movw	r30, r16
    1a62:	db cf       	rjmp	.-74     	; 0x1a1a <malloc+0x22>
    1a64:	21 15       	cp	r18, r1
    1a66:	31 05       	cpc	r19, r1
    1a68:	f9 f0       	breq	.+62     	; 0x1aa8 <malloc+0xb0>
    1a6a:	28 1b       	sub	r18, r24
    1a6c:	39 0b       	sbc	r19, r25
    1a6e:	24 30       	cpi	r18, 0x04	; 4
    1a70:	31 05       	cpc	r19, r1
    1a72:	80 f4       	brcc	.+32     	; 0x1a94 <malloc+0x9c>
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	9b 81       	ldd	r25, Y+3	; 0x03
    1a78:	61 15       	cp	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	21 f0       	breq	.+8      	; 0x1a86 <malloc+0x8e>
    1a7e:	fb 01       	movw	r30, r22
    1a80:	93 83       	std	Z+3, r25	; 0x03
    1a82:	82 83       	std	Z+2, r24	; 0x02
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <malloc+0x96>
    1a86:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <__flp+0x1>
    1a8a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <__flp>
    1a8e:	fe 01       	movw	r30, r28
    1a90:	32 96       	adiw	r30, 0x02	; 2
    1a92:	44 c0       	rjmp	.+136    	; 0x1b1c <malloc+0x124>
    1a94:	fe 01       	movw	r30, r28
    1a96:	e2 0f       	add	r30, r18
    1a98:	f3 1f       	adc	r31, r19
    1a9a:	81 93       	st	Z+, r24
    1a9c:	91 93       	st	Z+, r25
    1a9e:	22 50       	subi	r18, 0x02	; 2
    1aa0:	31 09       	sbc	r19, r1
    1aa2:	39 83       	std	Y+1, r19	; 0x01
    1aa4:	28 83       	st	Y, r18
    1aa6:	3a c0       	rjmp	.+116    	; 0x1b1c <malloc+0x124>
    1aa8:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <__brkval>
    1aac:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <__brkval+0x1>
    1ab0:	23 2b       	or	r18, r19
    1ab2:	41 f4       	brne	.+16     	; 0x1ac4 <malloc+0xcc>
    1ab4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1ab8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1abc:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <__brkval+0x1>
    1ac0:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <__brkval>
    1ac4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ac8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1acc:	21 15       	cp	r18, r1
    1ace:	31 05       	cpc	r19, r1
    1ad0:	41 f4       	brne	.+16     	; 0x1ae2 <malloc+0xea>
    1ad2:	2d b7       	in	r18, 0x3d	; 61
    1ad4:	3e b7       	in	r19, 0x3e	; 62
    1ad6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1ada:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ade:	24 1b       	sub	r18, r20
    1ae0:	35 0b       	sbc	r19, r21
    1ae2:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <__brkval>
    1ae6:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <__brkval+0x1>
    1aea:	e2 17       	cp	r30, r18
    1aec:	f3 07       	cpc	r31, r19
    1aee:	a0 f4       	brcc	.+40     	; 0x1b18 <malloc+0x120>
    1af0:	2e 1b       	sub	r18, r30
    1af2:	3f 0b       	sbc	r19, r31
    1af4:	28 17       	cp	r18, r24
    1af6:	39 07       	cpc	r19, r25
    1af8:	78 f0       	brcs	.+30     	; 0x1b18 <malloc+0x120>
    1afa:	ac 01       	movw	r20, r24
    1afc:	4e 5f       	subi	r20, 0xFE	; 254
    1afe:	5f 4f       	sbci	r21, 0xFF	; 255
    1b00:	24 17       	cp	r18, r20
    1b02:	35 07       	cpc	r19, r21
    1b04:	48 f0       	brcs	.+18     	; 0x1b18 <malloc+0x120>
    1b06:	4e 0f       	add	r20, r30
    1b08:	5f 1f       	adc	r21, r31
    1b0a:	50 93 b0 01 	sts	0x01B0, r21	; 0x8001b0 <__brkval+0x1>
    1b0e:	40 93 af 01 	sts	0x01AF, r20	; 0x8001af <__brkval>
    1b12:	81 93       	st	Z+, r24
    1b14:	91 93       	st	Z+, r25
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <malloc+0x124>
    1b18:	e0 e0       	ldi	r30, 0x00	; 0
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <free>:
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <free+0xa>
    1b30:	81 c0       	rjmp	.+258    	; 0x1c34 <free+0x10c>
    1b32:	fc 01       	movw	r30, r24
    1b34:	32 97       	sbiw	r30, 0x02	; 2
    1b36:	13 82       	std	Z+3, r1	; 0x03
    1b38:	12 82       	std	Z+2, r1	; 0x02
    1b3a:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <__flp>
    1b3e:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <__flp+0x1>
    1b42:	10 97       	sbiw	r26, 0x00	; 0
    1b44:	81 f4       	brne	.+32     	; 0x1b66 <free+0x3e>
    1b46:	20 81       	ld	r18, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
    1b4a:	82 0f       	add	r24, r18
    1b4c:	93 1f       	adc	r25, r19
    1b4e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <__brkval>
    1b52:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <__brkval+0x1>
    1b56:	28 17       	cp	r18, r24
    1b58:	39 07       	cpc	r19, r25
    1b5a:	51 f5       	brne	.+84     	; 0x1bb0 <free+0x88>
    1b5c:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <__brkval+0x1>
    1b60:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <__brkval>
    1b64:	67 c0       	rjmp	.+206    	; 0x1c34 <free+0x10c>
    1b66:	ed 01       	movw	r28, r26
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	ce 17       	cp	r28, r30
    1b6e:	df 07       	cpc	r29, r31
    1b70:	40 f4       	brcc	.+16     	; 0x1b82 <free+0x5a>
    1b72:	4a 81       	ldd	r20, Y+2	; 0x02
    1b74:	5b 81       	ldd	r21, Y+3	; 0x03
    1b76:	9e 01       	movw	r18, r28
    1b78:	41 15       	cp	r20, r1
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	f1 f0       	breq	.+60     	; 0x1bba <free+0x92>
    1b7e:	ea 01       	movw	r28, r20
    1b80:	f5 cf       	rjmp	.-22     	; 0x1b6c <free+0x44>
    1b82:	d3 83       	std	Z+3, r29	; 0x03
    1b84:	c2 83       	std	Z+2, r28	; 0x02
    1b86:	40 81       	ld	r20, Z
    1b88:	51 81       	ldd	r21, Z+1	; 0x01
    1b8a:	84 0f       	add	r24, r20
    1b8c:	95 1f       	adc	r25, r21
    1b8e:	c8 17       	cp	r28, r24
    1b90:	d9 07       	cpc	r29, r25
    1b92:	59 f4       	brne	.+22     	; 0x1baa <free+0x82>
    1b94:	88 81       	ld	r24, Y
    1b96:	99 81       	ldd	r25, Y+1	; 0x01
    1b98:	84 0f       	add	r24, r20
    1b9a:	95 1f       	adc	r25, r21
    1b9c:	02 96       	adiw	r24, 0x02	; 2
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	93 83       	std	Z+3, r25	; 0x03
    1ba8:	82 83       	std	Z+2, r24	; 0x02
    1baa:	21 15       	cp	r18, r1
    1bac:	31 05       	cpc	r19, r1
    1bae:	29 f4       	brne	.+10     	; 0x1bba <free+0x92>
    1bb0:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <__flp+0x1>
    1bb4:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <__flp>
    1bb8:	3d c0       	rjmp	.+122    	; 0x1c34 <free+0x10c>
    1bba:	e9 01       	movw	r28, r18
    1bbc:	fb 83       	std	Y+3, r31	; 0x03
    1bbe:	ea 83       	std	Y+2, r30	; 0x02
    1bc0:	49 91       	ld	r20, Y+
    1bc2:	59 91       	ld	r21, Y+
    1bc4:	c4 0f       	add	r28, r20
    1bc6:	d5 1f       	adc	r29, r21
    1bc8:	ec 17       	cp	r30, r28
    1bca:	fd 07       	cpc	r31, r29
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <free+0xbe>
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	84 0f       	add	r24, r20
    1bd4:	95 1f       	adc	r25, r21
    1bd6:	02 96       	adiw	r24, 0x02	; 2
    1bd8:	e9 01       	movw	r28, r18
    1bda:	99 83       	std	Y+1, r25	; 0x01
    1bdc:	88 83       	st	Y, r24
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	9b 83       	std	Y+3, r25	; 0x03
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	e0 e0       	ldi	r30, 0x00	; 0
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	12 96       	adiw	r26, 0x02	; 2
    1bec:	8d 91       	ld	r24, X+
    1bee:	9c 91       	ld	r25, X
    1bf0:	13 97       	sbiw	r26, 0x03	; 3
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	19 f0       	breq	.+6      	; 0x1bfc <free+0xd4>
    1bf6:	fd 01       	movw	r30, r26
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	f7 cf       	rjmp	.-18     	; 0x1bea <free+0xc2>
    1bfc:	8d 91       	ld	r24, X+
    1bfe:	9c 91       	ld	r25, X
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	9d 01       	movw	r18, r26
    1c04:	2e 5f       	subi	r18, 0xFE	; 254
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	82 0f       	add	r24, r18
    1c0a:	93 1f       	adc	r25, r19
    1c0c:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <__brkval>
    1c10:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <__brkval+0x1>
    1c14:	28 17       	cp	r18, r24
    1c16:	39 07       	cpc	r19, r25
    1c18:	69 f4       	brne	.+26     	; 0x1c34 <free+0x10c>
    1c1a:	30 97       	sbiw	r30, 0x00	; 0
    1c1c:	29 f4       	brne	.+10     	; 0x1c28 <free+0x100>
    1c1e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <__flp+0x1>
    1c22:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <__flp>
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <free+0x104>
    1c28:	13 82       	std	Z+3, r1	; 0x03
    1c2a:	12 82       	std	Z+2, r1	; 0x02
    1c2c:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <__brkval+0x1>
    1c30:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <__brkval>
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <do_rand>:
    1c3a:	8f 92       	push	r8
    1c3c:	9f 92       	push	r9
    1c3e:	af 92       	push	r10
    1c40:	bf 92       	push	r11
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	ec 01       	movw	r28, r24
    1c50:	68 81       	ld	r22, Y
    1c52:	79 81       	ldd	r23, Y+1	; 0x01
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	61 15       	cp	r22, r1
    1c5a:	71 05       	cpc	r23, r1
    1c5c:	81 05       	cpc	r24, r1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <do_rand+0x30>
    1c62:	64 e2       	ldi	r22, 0x24	; 36
    1c64:	79 ed       	ldi	r23, 0xD9	; 217
    1c66:	8b e5       	ldi	r24, 0x5B	; 91
    1c68:	97 e0       	ldi	r25, 0x07	; 7
    1c6a:	2d e1       	ldi	r18, 0x1D	; 29
    1c6c:	33 ef       	ldi	r19, 0xF3	; 243
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divmodsi4>
    1c76:	49 01       	movw	r8, r18
    1c78:	5a 01       	movw	r10, r20
    1c7a:	9b 01       	movw	r18, r22
    1c7c:	ac 01       	movw	r20, r24
    1c7e:	a7 ea       	ldi	r26, 0xA7	; 167
    1c80:	b1 e4       	ldi	r27, 0x41	; 65
    1c82:	0e 94 1a 12 	call	0x2434	; 0x2434 <__muluhisi3>
    1c86:	6b 01       	movw	r12, r22
    1c88:	7c 01       	movw	r14, r24
    1c8a:	ac ee       	ldi	r26, 0xEC	; 236
    1c8c:	b4 ef       	ldi	r27, 0xF4	; 244
    1c8e:	a5 01       	movw	r20, r10
    1c90:	94 01       	movw	r18, r8
    1c92:	0e 94 28 12 	call	0x2450	; 0x2450 <__mulohisi3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8c 0d       	add	r24, r12
    1c9c:	9d 1d       	adc	r25, r13
    1c9e:	ae 1d       	adc	r26, r14
    1ca0:	bf 1d       	adc	r27, r15
    1ca2:	b7 ff       	sbrs	r27, 7
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <do_rand+0x72>
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	a1 09       	sbc	r26, r1
    1caa:	b0 48       	sbci	r27, 0x80	; 128
    1cac:	88 83       	st	Y, r24
    1cae:	99 83       	std	Y+1, r25	; 0x01
    1cb0:	aa 83       	std	Y+2, r26	; 0x02
    1cb2:	bb 83       	std	Y+3, r27	; 0x03
    1cb4:	9f 77       	andi	r25, 0x7F	; 127
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	08 95       	ret

00001ccc <rand_r>:
    1ccc:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <do_rand>
    1cd0:	08 95       	ret

00001cd2 <rand>:
    1cd2:	86 e0       	ldi	r24, 0x06	; 6
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <do_rand>
    1cda:	08 95       	ret

00001cdc <srand>:
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1ce4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1ce8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1cec:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    1cf0:	08 95       	ret

00001cf2 <realloc>:
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	ef e7       	ldi	r30, 0x7F	; 127
    1cf8:	fe e0       	ldi	r31, 0x0E	; 14
    1cfa:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__prologue_saves__+0x8>
    1cfe:	ec 01       	movw	r28, r24
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	21 f4       	brne	.+8      	; 0x1d0c <realloc+0x1a>
    1d04:	cb 01       	movw	r24, r22
    1d06:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <malloc>
    1d0a:	b4 c0       	rjmp	.+360    	; 0x1e74 <realloc+0x182>
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	e6 0f       	add	r30, r22
    1d10:	f7 1f       	adc	r31, r23
    1d12:	9c 01       	movw	r18, r24
    1d14:	22 50       	subi	r18, 0x02	; 2
    1d16:	31 09       	sbc	r19, r1
    1d18:	e2 17       	cp	r30, r18
    1d1a:	f3 07       	cpc	r31, r19
    1d1c:	08 f4       	brcc	.+2      	; 0x1d20 <realloc+0x2e>
    1d1e:	a8 c0       	rjmp	.+336    	; 0x1e70 <realloc+0x17e>
    1d20:	d9 01       	movw	r26, r18
    1d22:	0d 91       	ld	r16, X+
    1d24:	1c 91       	ld	r17, X
    1d26:	11 97       	sbiw	r26, 0x01	; 1
    1d28:	06 17       	cp	r16, r22
    1d2a:	17 07       	cpc	r17, r23
    1d2c:	b0 f0       	brcs	.+44     	; 0x1d5a <realloc+0x68>
    1d2e:	05 30       	cpi	r16, 0x05	; 5
    1d30:	11 05       	cpc	r17, r1
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <realloc+0x44>
    1d34:	9b c0       	rjmp	.+310    	; 0x1e6c <realloc+0x17a>
    1d36:	c8 01       	movw	r24, r16
    1d38:	04 97       	sbiw	r24, 0x04	; 4
    1d3a:	86 17       	cp	r24, r22
    1d3c:	97 07       	cpc	r25, r23
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <realloc+0x50>
    1d40:	95 c0       	rjmp	.+298    	; 0x1e6c <realloc+0x17a>
    1d42:	02 50       	subi	r16, 0x02	; 2
    1d44:	11 09       	sbc	r17, r1
    1d46:	06 1b       	sub	r16, r22
    1d48:	17 0b       	sbc	r17, r23
    1d4a:	01 93       	st	Z+, r16
    1d4c:	11 93       	st	Z+, r17
    1d4e:	6d 93       	st	X+, r22
    1d50:	7c 93       	st	X, r23
    1d52:	cf 01       	movw	r24, r30
    1d54:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    1d58:	89 c0       	rjmp	.+274    	; 0x1e6c <realloc+0x17a>
    1d5a:	5b 01       	movw	r10, r22
    1d5c:	a0 1a       	sub	r10, r16
    1d5e:	b1 0a       	sbc	r11, r17
    1d60:	4c 01       	movw	r8, r24
    1d62:	80 0e       	add	r8, r16
    1d64:	91 1e       	adc	r9, r17
    1d66:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <__flp>
    1d6a:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <__flp+0x1>
    1d6e:	61 2c       	mov	r6, r1
    1d70:	71 2c       	mov	r7, r1
    1d72:	e1 2c       	mov	r14, r1
    1d74:	f1 2c       	mov	r15, r1
    1d76:	10 97       	sbiw	r26, 0x00	; 0
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <realloc+0x8a>
    1d7a:	46 c0       	rjmp	.+140    	; 0x1e08 <realloc+0x116>
    1d7c:	8d 91       	ld	r24, X+
    1d7e:	9c 91       	ld	r25, X
    1d80:	11 97       	sbiw	r26, 0x01	; 1
    1d82:	a8 15       	cp	r26, r8
    1d84:	b9 05       	cpc	r27, r9
    1d86:	b1 f5       	brne	.+108    	; 0x1df4 <realloc+0x102>
    1d88:	6c 01       	movw	r12, r24
    1d8a:	42 e0       	ldi	r20, 0x02	; 2
    1d8c:	c4 0e       	add	r12, r20
    1d8e:	d1 1c       	adc	r13, r1
    1d90:	ca 14       	cp	r12, r10
    1d92:	db 04       	cpc	r13, r11
    1d94:	78 f1       	brcs	.+94     	; 0x1df4 <realloc+0x102>
    1d96:	4c 01       	movw	r8, r24
    1d98:	8a 18       	sub	r8, r10
    1d9a:	9b 08       	sbc	r9, r11
    1d9c:	64 01       	movw	r12, r8
    1d9e:	42 e0       	ldi	r20, 0x02	; 2
    1da0:	c4 0e       	add	r12, r20
    1da2:	d1 1c       	adc	r13, r1
    1da4:	12 96       	adiw	r26, 0x02	; 2
    1da6:	bc 90       	ld	r11, X
    1da8:	12 97       	sbiw	r26, 0x02	; 2
    1daa:	13 96       	adiw	r26, 0x03	; 3
    1dac:	ac 91       	ld	r26, X
    1dae:	b5 e0       	ldi	r27, 0x05	; 5
    1db0:	cb 16       	cp	r12, r27
    1db2:	d1 04       	cpc	r13, r1
    1db4:	40 f0       	brcs	.+16     	; 0x1dc6 <realloc+0xd4>
    1db6:	b2 82       	std	Z+2, r11	; 0x02
    1db8:	a3 83       	std	Z+3, r26	; 0x03
    1dba:	91 82       	std	Z+1, r9	; 0x01
    1dbc:	80 82       	st	Z, r8
    1dbe:	d9 01       	movw	r26, r18
    1dc0:	6d 93       	st	X+, r22
    1dc2:	7c 93       	st	X, r23
    1dc4:	09 c0       	rjmp	.+18     	; 0x1dd8 <realloc+0xe6>
    1dc6:	0e 5f       	subi	r16, 0xFE	; 254
    1dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dca:	80 0f       	add	r24, r16
    1dcc:	91 1f       	adc	r25, r17
    1dce:	f9 01       	movw	r30, r18
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	eb 2d       	mov	r30, r11
    1dd6:	fa 2f       	mov	r31, r26
    1dd8:	e1 14       	cp	r14, r1
    1dda:	f1 04       	cpc	r15, r1
    1ddc:	31 f0       	breq	.+12     	; 0x1dea <realloc+0xf8>
    1dde:	d7 01       	movw	r26, r14
    1de0:	13 96       	adiw	r26, 0x03	; 3
    1de2:	fc 93       	st	X, r31
    1de4:	ee 93       	st	-X, r30
    1de6:	12 97       	sbiw	r26, 0x02	; 2
    1de8:	41 c0       	rjmp	.+130    	; 0x1e6c <realloc+0x17a>
    1dea:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <__flp+0x1>
    1dee:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <__flp>
    1df2:	3c c0       	rjmp	.+120    	; 0x1e6c <realloc+0x17a>
    1df4:	68 16       	cp	r6, r24
    1df6:	79 06       	cpc	r7, r25
    1df8:	08 f4       	brcc	.+2      	; 0x1dfc <realloc+0x10a>
    1dfa:	3c 01       	movw	r6, r24
    1dfc:	7d 01       	movw	r14, r26
    1dfe:	12 96       	adiw	r26, 0x02	; 2
    1e00:	0d 90       	ld	r0, X+
    1e02:	bc 91       	ld	r27, X
    1e04:	a0 2d       	mov	r26, r0
    1e06:	b7 cf       	rjmp	.-146    	; 0x1d76 <realloc+0x84>
    1e08:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <__brkval>
    1e0c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <__brkval+0x1>
    1e10:	88 16       	cp	r8, r24
    1e12:	99 06       	cpc	r9, r25
    1e14:	e1 f4       	brne	.+56     	; 0x1e4e <realloc+0x15c>
    1e16:	66 16       	cp	r6, r22
    1e18:	77 06       	cpc	r7, r23
    1e1a:	c8 f4       	brcc	.+50     	; 0x1e4e <realloc+0x15c>
    1e1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	41 f4       	brne	.+16     	; 0x1e38 <realloc+0x146>
    1e28:	8d b7       	in	r24, 0x3d	; 61
    1e2a:	9e b7       	in	r25, 0x3e	; 62
    1e2c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e30:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1e34:	84 1b       	sub	r24, r20
    1e36:	95 0b       	sbc	r25, r21
    1e38:	e8 17       	cp	r30, r24
    1e3a:	f9 07       	cpc	r31, r25
    1e3c:	c8 f4       	brcc	.+50     	; 0x1e70 <realloc+0x17e>
    1e3e:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <__brkval+0x1>
    1e42:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <__brkval>
    1e46:	f9 01       	movw	r30, r18
    1e48:	71 83       	std	Z+1, r23	; 0x01
    1e4a:	60 83       	st	Z, r22
    1e4c:	0f c0       	rjmp	.+30     	; 0x1e6c <realloc+0x17a>
    1e4e:	cb 01       	movw	r24, r22
    1e50:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <malloc>
    1e54:	7c 01       	movw	r14, r24
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	59 f0       	breq	.+22     	; 0x1e70 <realloc+0x17e>
    1e5a:	a8 01       	movw	r20, r16
    1e5c:	be 01       	movw	r22, r28
    1e5e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <memcpy>
    1e62:	ce 01       	movw	r24, r28
    1e64:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <free>
    1e68:	c7 01       	movw	r24, r14
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <realloc+0x182>
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <realloc+0x182>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	ee e0       	ldi	r30, 0x0E	; 14
    1e7a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__epilogue_restores__+0x8>

00001e7e <memcpy>:
    1e7e:	fb 01       	movw	r30, r22
    1e80:	dc 01       	movw	r26, r24
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <memcpy+0xa>
    1e84:	01 90       	ld	r0, Z+
    1e86:	0d 92       	st	X+, r0
    1e88:	41 50       	subi	r20, 0x01	; 1
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	d8 f7       	brcc	.-10     	; 0x1e84 <memcpy+0x6>
    1e8e:	08 95       	ret

00001e90 <sprintf>:
    1e90:	ae e0       	ldi	r26, 0x0E	; 14
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ee e4       	ldi	r30, 0x4E	; 78
    1e96:	ff e0       	ldi	r31, 0x0F	; 15
    1e98:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x1c>
    1e9c:	0d 89       	ldd	r16, Y+21	; 0x15
    1e9e:	1e 89       	ldd	r17, Y+22	; 0x16
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
    1ea2:	8c 83       	std	Y+4, r24	; 0x04
    1ea4:	1a 83       	std	Y+2, r17	; 0x02
    1ea6:	09 83       	std	Y+1, r16	; 0x01
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	9f e7       	ldi	r25, 0x7F	; 127
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	ae 01       	movw	r20, r28
    1eb2:	47 5e       	subi	r20, 0xE7	; 231
    1eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb6:	6f 89       	ldd	r22, Y+23	; 0x17
    1eb8:	78 8d       	ldd	r23, Y+24	; 0x18
    1eba:	ce 01       	movw	r24, r28
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <vfprintf>
    1ec2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ec4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ec6:	e0 0f       	add	r30, r16
    1ec8:	f1 1f       	adc	r31, r17
    1eca:	10 82       	st	Z, r1
    1ecc:	2e 96       	adiw	r28, 0x0e	; 14
    1ece:	e4 e0       	ldi	r30, 0x04	; 4
    1ed0:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x1c>

00001ed4 <vfprintf>:
    1ed4:	ab e0       	ldi	r26, 0x0B	; 11
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e0 e7       	ldi	r30, 0x70	; 112
    1eda:	ff e0       	ldi	r31, 0x0F	; 15
    1edc:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__>
    1ee0:	6c 01       	movw	r12, r24
    1ee2:	7b 01       	movw	r14, r22
    1ee4:	8a 01       	movw	r16, r20
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	17 82       	std	Z+7, r1	; 0x07
    1eea:	16 82       	std	Z+6, r1	; 0x06
    1eec:	83 81       	ldd	r24, Z+3	; 0x03
    1eee:	81 ff       	sbrs	r24, 1
    1ef0:	cc c1       	rjmp	.+920    	; 0x228a <vfprintf+0x3b6>
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	3c 01       	movw	r6, r24
    1ef8:	f6 01       	movw	r30, r12
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	f7 01       	movw	r30, r14
    1efe:	93 fd       	sbrc	r25, 3
    1f00:	85 91       	lpm	r24, Z+
    1f02:	93 ff       	sbrs	r25, 3
    1f04:	81 91       	ld	r24, Z+
    1f06:	7f 01       	movw	r14, r30
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <vfprintf+0x3a>
    1f0c:	ba c1       	rjmp	.+884    	; 0x2282 <vfprintf+0x3ae>
    1f0e:	85 32       	cpi	r24, 0x25	; 37
    1f10:	39 f4       	brne	.+14     	; 0x1f20 <vfprintf+0x4c>
    1f12:	93 fd       	sbrc	r25, 3
    1f14:	85 91       	lpm	r24, Z+
    1f16:	93 ff       	sbrs	r25, 3
    1f18:	81 91       	ld	r24, Z+
    1f1a:	7f 01       	movw	r14, r30
    1f1c:	85 32       	cpi	r24, 0x25	; 37
    1f1e:	29 f4       	brne	.+10     	; 0x1f2a <vfprintf+0x56>
    1f20:	b6 01       	movw	r22, r12
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    1f28:	e7 cf       	rjmp	.-50     	; 0x1ef8 <vfprintf+0x24>
    1f2a:	91 2c       	mov	r9, r1
    1f2c:	21 2c       	mov	r2, r1
    1f2e:	31 2c       	mov	r3, r1
    1f30:	ff e1       	ldi	r31, 0x1F	; 31
    1f32:	f3 15       	cp	r31, r3
    1f34:	d8 f0       	brcs	.+54     	; 0x1f6c <vfprintf+0x98>
    1f36:	8b 32       	cpi	r24, 0x2B	; 43
    1f38:	79 f0       	breq	.+30     	; 0x1f58 <vfprintf+0x84>
    1f3a:	38 f4       	brcc	.+14     	; 0x1f4a <vfprintf+0x76>
    1f3c:	80 32       	cpi	r24, 0x20	; 32
    1f3e:	79 f0       	breq	.+30     	; 0x1f5e <vfprintf+0x8a>
    1f40:	83 32       	cpi	r24, 0x23	; 35
    1f42:	a1 f4       	brne	.+40     	; 0x1f6c <vfprintf+0x98>
    1f44:	23 2d       	mov	r18, r3
    1f46:	20 61       	ori	r18, 0x10	; 16
    1f48:	1d c0       	rjmp	.+58     	; 0x1f84 <vfprintf+0xb0>
    1f4a:	8d 32       	cpi	r24, 0x2D	; 45
    1f4c:	61 f0       	breq	.+24     	; 0x1f66 <vfprintf+0x92>
    1f4e:	80 33       	cpi	r24, 0x30	; 48
    1f50:	69 f4       	brne	.+26     	; 0x1f6c <vfprintf+0x98>
    1f52:	23 2d       	mov	r18, r3
    1f54:	21 60       	ori	r18, 0x01	; 1
    1f56:	16 c0       	rjmp	.+44     	; 0x1f84 <vfprintf+0xb0>
    1f58:	83 2d       	mov	r24, r3
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	38 2e       	mov	r3, r24
    1f5e:	e3 2d       	mov	r30, r3
    1f60:	e4 60       	ori	r30, 0x04	; 4
    1f62:	3e 2e       	mov	r3, r30
    1f64:	2a c0       	rjmp	.+84     	; 0x1fba <vfprintf+0xe6>
    1f66:	f3 2d       	mov	r31, r3
    1f68:	f8 60       	ori	r31, 0x08	; 8
    1f6a:	1d c0       	rjmp	.+58     	; 0x1fa6 <vfprintf+0xd2>
    1f6c:	37 fc       	sbrc	r3, 7
    1f6e:	2d c0       	rjmp	.+90     	; 0x1fca <vfprintf+0xf6>
    1f70:	20 ed       	ldi	r18, 0xD0	; 208
    1f72:	28 0f       	add	r18, r24
    1f74:	2a 30       	cpi	r18, 0x0A	; 10
    1f76:	40 f0       	brcs	.+16     	; 0x1f88 <vfprintf+0xb4>
    1f78:	8e 32       	cpi	r24, 0x2E	; 46
    1f7a:	b9 f4       	brne	.+46     	; 0x1faa <vfprintf+0xd6>
    1f7c:	36 fc       	sbrc	r3, 6
    1f7e:	81 c1       	rjmp	.+770    	; 0x2282 <vfprintf+0x3ae>
    1f80:	23 2d       	mov	r18, r3
    1f82:	20 64       	ori	r18, 0x40	; 64
    1f84:	32 2e       	mov	r3, r18
    1f86:	19 c0       	rjmp	.+50     	; 0x1fba <vfprintf+0xe6>
    1f88:	36 fe       	sbrs	r3, 6
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <vfprintf+0xc4>
    1f8c:	8a e0       	ldi	r24, 0x0A	; 10
    1f8e:	98 9e       	mul	r9, r24
    1f90:	20 0d       	add	r18, r0
    1f92:	11 24       	eor	r1, r1
    1f94:	92 2e       	mov	r9, r18
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <vfprintf+0xe6>
    1f98:	ea e0       	ldi	r30, 0x0A	; 10
    1f9a:	2e 9e       	mul	r2, r30
    1f9c:	20 0d       	add	r18, r0
    1f9e:	11 24       	eor	r1, r1
    1fa0:	22 2e       	mov	r2, r18
    1fa2:	f3 2d       	mov	r31, r3
    1fa4:	f0 62       	ori	r31, 0x20	; 32
    1fa6:	3f 2e       	mov	r3, r31
    1fa8:	08 c0       	rjmp	.+16     	; 0x1fba <vfprintf+0xe6>
    1faa:	8c 36       	cpi	r24, 0x6C	; 108
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0xe2>
    1fae:	83 2d       	mov	r24, r3
    1fb0:	80 68       	ori	r24, 0x80	; 128
    1fb2:	38 2e       	mov	r3, r24
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0xe6>
    1fb6:	88 36       	cpi	r24, 0x68	; 104
    1fb8:	41 f4       	brne	.+16     	; 0x1fca <vfprintf+0xf6>
    1fba:	f7 01       	movw	r30, r14
    1fbc:	93 fd       	sbrc	r25, 3
    1fbe:	85 91       	lpm	r24, Z+
    1fc0:	93 ff       	sbrs	r25, 3
    1fc2:	81 91       	ld	r24, Z+
    1fc4:	7f 01       	movw	r14, r30
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	b3 cf       	rjmp	.-154    	; 0x1f30 <vfprintf+0x5c>
    1fca:	98 2f       	mov	r25, r24
    1fcc:	9f 7d       	andi	r25, 0xDF	; 223
    1fce:	95 54       	subi	r25, 0x45	; 69
    1fd0:	93 30       	cpi	r25, 0x03	; 3
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <vfprintf+0x10a>
    1fd4:	0c 5f       	subi	r16, 0xFC	; 252
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	9f e3       	ldi	r25, 0x3F	; 63
    1fda:	99 83       	std	Y+1, r25	; 0x01
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <vfprintf+0x124>
    1fde:	83 36       	cpi	r24, 0x63	; 99
    1fe0:	31 f0       	breq	.+12     	; 0x1fee <vfprintf+0x11a>
    1fe2:	83 37       	cpi	r24, 0x73	; 115
    1fe4:	71 f0       	breq	.+28     	; 0x2002 <vfprintf+0x12e>
    1fe6:	83 35       	cpi	r24, 0x53	; 83
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <vfprintf+0x118>
    1fea:	59 c0       	rjmp	.+178    	; 0x209e <vfprintf+0x1ca>
    1fec:	21 c0       	rjmp	.+66     	; 0x2030 <vfprintf+0x15c>
    1fee:	f8 01       	movw	r30, r16
    1ff0:	80 81       	ld	r24, Z
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	0e 5f       	subi	r16, 0xFE	; 254
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	88 24       	eor	r8, r8
    1ffa:	83 94       	inc	r8
    1ffc:	91 2c       	mov	r9, r1
    1ffe:	53 01       	movw	r10, r6
    2000:	13 c0       	rjmp	.+38     	; 0x2028 <vfprintf+0x154>
    2002:	28 01       	movw	r4, r16
    2004:	f2 e0       	ldi	r31, 0x02	; 2
    2006:	4f 0e       	add	r4, r31
    2008:	51 1c       	adc	r5, r1
    200a:	f8 01       	movw	r30, r16
    200c:	a0 80       	ld	r10, Z
    200e:	b1 80       	ldd	r11, Z+1	; 0x01
    2010:	36 fe       	sbrs	r3, 6
    2012:	03 c0       	rjmp	.+6      	; 0x201a <vfprintf+0x146>
    2014:	69 2d       	mov	r22, r9
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <vfprintf+0x14a>
    201a:	6f ef       	ldi	r22, 0xFF	; 255
    201c:	7f ef       	ldi	r23, 0xFF	; 255
    201e:	c5 01       	movw	r24, r10
    2020:	0e 94 56 11 	call	0x22ac	; 0x22ac <strnlen>
    2024:	4c 01       	movw	r8, r24
    2026:	82 01       	movw	r16, r4
    2028:	f3 2d       	mov	r31, r3
    202a:	ff 77       	andi	r31, 0x7F	; 127
    202c:	3f 2e       	mov	r3, r31
    202e:	16 c0       	rjmp	.+44     	; 0x205c <vfprintf+0x188>
    2030:	28 01       	movw	r4, r16
    2032:	22 e0       	ldi	r18, 0x02	; 2
    2034:	42 0e       	add	r4, r18
    2036:	51 1c       	adc	r5, r1
    2038:	f8 01       	movw	r30, r16
    203a:	a0 80       	ld	r10, Z
    203c:	b1 80       	ldd	r11, Z+1	; 0x01
    203e:	36 fe       	sbrs	r3, 6
    2040:	03 c0       	rjmp	.+6      	; 0x2048 <vfprintf+0x174>
    2042:	69 2d       	mov	r22, r9
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vfprintf+0x178>
    2048:	6f ef       	ldi	r22, 0xFF	; 255
    204a:	7f ef       	ldi	r23, 0xFF	; 255
    204c:	c5 01       	movw	r24, r10
    204e:	0e 94 4b 11 	call	0x2296	; 0x2296 <strnlen_P>
    2052:	4c 01       	movw	r8, r24
    2054:	f3 2d       	mov	r31, r3
    2056:	f0 68       	ori	r31, 0x80	; 128
    2058:	3f 2e       	mov	r3, r31
    205a:	82 01       	movw	r16, r4
    205c:	33 fc       	sbrc	r3, 3
    205e:	1b c0       	rjmp	.+54     	; 0x2096 <vfprintf+0x1c2>
    2060:	82 2d       	mov	r24, r2
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	88 16       	cp	r8, r24
    2066:	99 06       	cpc	r9, r25
    2068:	b0 f4       	brcc	.+44     	; 0x2096 <vfprintf+0x1c2>
    206a:	b6 01       	movw	r22, r12
    206c:	80 e2       	ldi	r24, 0x20	; 32
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    2074:	2a 94       	dec	r2
    2076:	f4 cf       	rjmp	.-24     	; 0x2060 <vfprintf+0x18c>
    2078:	f5 01       	movw	r30, r10
    207a:	37 fc       	sbrc	r3, 7
    207c:	85 91       	lpm	r24, Z+
    207e:	37 fe       	sbrs	r3, 7
    2080:	81 91       	ld	r24, Z+
    2082:	5f 01       	movw	r10, r30
    2084:	b6 01       	movw	r22, r12
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    208c:	21 10       	cpse	r2, r1
    208e:	2a 94       	dec	r2
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	82 1a       	sub	r8, r18
    2094:	91 08       	sbc	r9, r1
    2096:	81 14       	cp	r8, r1
    2098:	91 04       	cpc	r9, r1
    209a:	71 f7       	brne	.-36     	; 0x2078 <vfprintf+0x1a4>
    209c:	e8 c0       	rjmp	.+464    	; 0x226e <vfprintf+0x39a>
    209e:	84 36       	cpi	r24, 0x64	; 100
    20a0:	11 f0       	breq	.+4      	; 0x20a6 <vfprintf+0x1d2>
    20a2:	89 36       	cpi	r24, 0x69	; 105
    20a4:	41 f5       	brne	.+80     	; 0x20f6 <vfprintf+0x222>
    20a6:	f8 01       	movw	r30, r16
    20a8:	37 fe       	sbrs	r3, 7
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <vfprintf+0x1e6>
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	0c 5f       	subi	r16, 0xFC	; 252
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	08 c0       	rjmp	.+16     	; 0x20ca <vfprintf+0x1f6>
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	07 2e       	mov	r0, r23
    20c0:	00 0c       	add	r0, r0
    20c2:	88 0b       	sbc	r24, r24
    20c4:	99 0b       	sbc	r25, r25
    20c6:	0e 5f       	subi	r16, 0xFE	; 254
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	f3 2d       	mov	r31, r3
    20cc:	ff 76       	andi	r31, 0x6F	; 111
    20ce:	3f 2e       	mov	r3, r31
    20d0:	97 ff       	sbrs	r25, 7
    20d2:	09 c0       	rjmp	.+18     	; 0x20e6 <vfprintf+0x212>
    20d4:	90 95       	com	r25
    20d6:	80 95       	com	r24
    20d8:	70 95       	com	r23
    20da:	61 95       	neg	r22
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	f0 68       	ori	r31, 0x80	; 128
    20e4:	3f 2e       	mov	r3, r31
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	a3 01       	movw	r20, r6
    20ec:	0e 94 9d 11 	call	0x233a	; 0x233a <__ultoa_invert>
    20f0:	88 2e       	mov	r8, r24
    20f2:	86 18       	sub	r8, r6
    20f4:	45 c0       	rjmp	.+138    	; 0x2180 <vfprintf+0x2ac>
    20f6:	85 37       	cpi	r24, 0x75	; 117
    20f8:	31 f4       	brne	.+12     	; 0x2106 <vfprintf+0x232>
    20fa:	23 2d       	mov	r18, r3
    20fc:	2f 7e       	andi	r18, 0xEF	; 239
    20fe:	b2 2e       	mov	r11, r18
    2100:	2a e0       	ldi	r18, 0x0A	; 10
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	25 c0       	rjmp	.+74     	; 0x2150 <vfprintf+0x27c>
    2106:	93 2d       	mov	r25, r3
    2108:	99 7f       	andi	r25, 0xF9	; 249
    210a:	b9 2e       	mov	r11, r25
    210c:	8f 36       	cpi	r24, 0x6F	; 111
    210e:	c1 f0       	breq	.+48     	; 0x2140 <vfprintf+0x26c>
    2110:	18 f4       	brcc	.+6      	; 0x2118 <vfprintf+0x244>
    2112:	88 35       	cpi	r24, 0x58	; 88
    2114:	79 f0       	breq	.+30     	; 0x2134 <vfprintf+0x260>
    2116:	b5 c0       	rjmp	.+362    	; 0x2282 <vfprintf+0x3ae>
    2118:	80 37       	cpi	r24, 0x70	; 112
    211a:	19 f0       	breq	.+6      	; 0x2122 <vfprintf+0x24e>
    211c:	88 37       	cpi	r24, 0x78	; 120
    211e:	21 f0       	breq	.+8      	; 0x2128 <vfprintf+0x254>
    2120:	b0 c0       	rjmp	.+352    	; 0x2282 <vfprintf+0x3ae>
    2122:	e9 2f       	mov	r30, r25
    2124:	e0 61       	ori	r30, 0x10	; 16
    2126:	be 2e       	mov	r11, r30
    2128:	b4 fe       	sbrs	r11, 4
    212a:	0d c0       	rjmp	.+26     	; 0x2146 <vfprintf+0x272>
    212c:	fb 2d       	mov	r31, r11
    212e:	f4 60       	ori	r31, 0x04	; 4
    2130:	bf 2e       	mov	r11, r31
    2132:	09 c0       	rjmp	.+18     	; 0x2146 <vfprintf+0x272>
    2134:	34 fe       	sbrs	r3, 4
    2136:	0a c0       	rjmp	.+20     	; 0x214c <vfprintf+0x278>
    2138:	29 2f       	mov	r18, r25
    213a:	26 60       	ori	r18, 0x06	; 6
    213c:	b2 2e       	mov	r11, r18
    213e:	06 c0       	rjmp	.+12     	; 0x214c <vfprintf+0x278>
    2140:	28 e0       	ldi	r18, 0x08	; 8
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	05 c0       	rjmp	.+10     	; 0x2150 <vfprintf+0x27c>
    2146:	20 e1       	ldi	r18, 0x10	; 16
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <vfprintf+0x27c>
    214c:	20 e1       	ldi	r18, 0x10	; 16
    214e:	32 e0       	ldi	r19, 0x02	; 2
    2150:	f8 01       	movw	r30, r16
    2152:	b7 fe       	sbrs	r11, 7
    2154:	07 c0       	rjmp	.+14     	; 0x2164 <vfprintf+0x290>
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	0c 5f       	subi	r16, 0xFC	; 252
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <vfprintf+0x29c>
    2164:	60 81       	ld	r22, Z
    2166:	71 81       	ldd	r23, Z+1	; 0x01
    2168:	80 e0       	ldi	r24, 0x00	; 0
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 5f       	subi	r16, 0xFE	; 254
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	a3 01       	movw	r20, r6
    2172:	0e 94 9d 11 	call	0x233a	; 0x233a <__ultoa_invert>
    2176:	88 2e       	mov	r8, r24
    2178:	86 18       	sub	r8, r6
    217a:	fb 2d       	mov	r31, r11
    217c:	ff 77       	andi	r31, 0x7F	; 127
    217e:	3f 2e       	mov	r3, r31
    2180:	36 fe       	sbrs	r3, 6
    2182:	0d c0       	rjmp	.+26     	; 0x219e <vfprintf+0x2ca>
    2184:	23 2d       	mov	r18, r3
    2186:	2e 7f       	andi	r18, 0xFE	; 254
    2188:	a2 2e       	mov	r10, r18
    218a:	89 14       	cp	r8, r9
    218c:	58 f4       	brcc	.+22     	; 0x21a4 <vfprintf+0x2d0>
    218e:	34 fe       	sbrs	r3, 4
    2190:	0b c0       	rjmp	.+22     	; 0x21a8 <vfprintf+0x2d4>
    2192:	32 fc       	sbrc	r3, 2
    2194:	09 c0       	rjmp	.+18     	; 0x21a8 <vfprintf+0x2d4>
    2196:	83 2d       	mov	r24, r3
    2198:	8e 7e       	andi	r24, 0xEE	; 238
    219a:	a8 2e       	mov	r10, r24
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <vfprintf+0x2d4>
    219e:	b8 2c       	mov	r11, r8
    21a0:	a3 2c       	mov	r10, r3
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <vfprintf+0x2d6>
    21a4:	b8 2c       	mov	r11, r8
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <vfprintf+0x2d6>
    21a8:	b9 2c       	mov	r11, r9
    21aa:	a4 fe       	sbrs	r10, 4
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <vfprintf+0x2f8>
    21ae:	fe 01       	movw	r30, r28
    21b0:	e8 0d       	add	r30, r8
    21b2:	f1 1d       	adc	r31, r1
    21b4:	80 81       	ld	r24, Z
    21b6:	80 33       	cpi	r24, 0x30	; 48
    21b8:	21 f4       	brne	.+8      	; 0x21c2 <vfprintf+0x2ee>
    21ba:	9a 2d       	mov	r25, r10
    21bc:	99 7e       	andi	r25, 0xE9	; 233
    21be:	a9 2e       	mov	r10, r25
    21c0:	09 c0       	rjmp	.+18     	; 0x21d4 <vfprintf+0x300>
    21c2:	a2 fe       	sbrs	r10, 2
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0x2fe>
    21c6:	b3 94       	inc	r11
    21c8:	b3 94       	inc	r11
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <vfprintf+0x300>
    21cc:	8a 2d       	mov	r24, r10
    21ce:	86 78       	andi	r24, 0x86	; 134
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <vfprintf+0x300>
    21d2:	b3 94       	inc	r11
    21d4:	a3 fc       	sbrc	r10, 3
    21d6:	11 c0       	rjmp	.+34     	; 0x21fa <vfprintf+0x326>
    21d8:	a0 fe       	sbrs	r10, 0
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <vfprintf+0x314>
    21dc:	b2 14       	cp	r11, r2
    21de:	88 f4       	brcc	.+34     	; 0x2202 <vfprintf+0x32e>
    21e0:	28 0c       	add	r2, r8
    21e2:	92 2c       	mov	r9, r2
    21e4:	9b 18       	sub	r9, r11
    21e6:	0e c0       	rjmp	.+28     	; 0x2204 <vfprintf+0x330>
    21e8:	b2 14       	cp	r11, r2
    21ea:	60 f4       	brcc	.+24     	; 0x2204 <vfprintf+0x330>
    21ec:	b6 01       	movw	r22, r12
    21ee:	80 e2       	ldi	r24, 0x20	; 32
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    21f6:	b3 94       	inc	r11
    21f8:	f7 cf       	rjmp	.-18     	; 0x21e8 <vfprintf+0x314>
    21fa:	b2 14       	cp	r11, r2
    21fc:	18 f4       	brcc	.+6      	; 0x2204 <vfprintf+0x330>
    21fe:	2b 18       	sub	r2, r11
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <vfprintf+0x332>
    2202:	98 2c       	mov	r9, r8
    2204:	21 2c       	mov	r2, r1
    2206:	a4 fe       	sbrs	r10, 4
    2208:	10 c0       	rjmp	.+32     	; 0x222a <vfprintf+0x356>
    220a:	b6 01       	movw	r22, r12
    220c:	80 e3       	ldi	r24, 0x30	; 48
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    2214:	a2 fe       	sbrs	r10, 2
    2216:	17 c0       	rjmp	.+46     	; 0x2246 <vfprintf+0x372>
    2218:	a1 fc       	sbrc	r10, 1
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <vfprintf+0x34e>
    221c:	88 e7       	ldi	r24, 0x78	; 120
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <vfprintf+0x352>
    2222:	88 e5       	ldi	r24, 0x58	; 88
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	b6 01       	movw	r22, r12
    2228:	0c c0       	rjmp	.+24     	; 0x2242 <vfprintf+0x36e>
    222a:	8a 2d       	mov	r24, r10
    222c:	86 78       	andi	r24, 0x86	; 134
    222e:	59 f0       	breq	.+22     	; 0x2246 <vfprintf+0x372>
    2230:	a1 fe       	sbrs	r10, 1
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vfprintf+0x364>
    2234:	8b e2       	ldi	r24, 0x2B	; 43
    2236:	01 c0       	rjmp	.+2      	; 0x223a <vfprintf+0x366>
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	a7 fc       	sbrc	r10, 7
    223c:	8d e2       	ldi	r24, 0x2D	; 45
    223e:	b6 01       	movw	r22, r12
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    2246:	89 14       	cp	r8, r9
    2248:	38 f4       	brcc	.+14     	; 0x2258 <vfprintf+0x384>
    224a:	b6 01       	movw	r22, r12
    224c:	80 e3       	ldi	r24, 0x30	; 48
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    2254:	9a 94       	dec	r9
    2256:	f7 cf       	rjmp	.-18     	; 0x2246 <vfprintf+0x372>
    2258:	8a 94       	dec	r8
    225a:	f3 01       	movw	r30, r6
    225c:	e8 0d       	add	r30, r8
    225e:	f1 1d       	adc	r31, r1
    2260:	80 81       	ld	r24, Z
    2262:	b6 01       	movw	r22, r12
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    226a:	81 10       	cpse	r8, r1
    226c:	f5 cf       	rjmp	.-22     	; 0x2258 <vfprintf+0x384>
    226e:	22 20       	and	r2, r2
    2270:	09 f4       	brne	.+2      	; 0x2274 <vfprintf+0x3a0>
    2272:	42 ce       	rjmp	.-892    	; 0x1ef8 <vfprintf+0x24>
    2274:	b6 01       	movw	r22, r12
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <fputc>
    227e:	2a 94       	dec	r2
    2280:	f6 cf       	rjmp	.-20     	; 0x226e <vfprintf+0x39a>
    2282:	f6 01       	movw	r30, r12
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	02 c0       	rjmp	.+4      	; 0x228e <vfprintf+0x3ba>
    228a:	8f ef       	ldi	r24, 0xFF	; 255
    228c:	9f ef       	ldi	r25, 0xFF	; 255
    228e:	2b 96       	adiw	r28, 0x0b	; 11
    2290:	e2 e1       	ldi	r30, 0x12	; 18
    2292:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__>

00002296 <strnlen_P>:
    2296:	fc 01       	movw	r30, r24
    2298:	05 90       	lpm	r0, Z+
    229a:	61 50       	subi	r22, 0x01	; 1
    229c:	70 40       	sbci	r23, 0x00	; 0
    229e:	01 10       	cpse	r0, r1
    22a0:	d8 f7       	brcc	.-10     	; 0x2298 <strnlen_P+0x2>
    22a2:	80 95       	com	r24
    22a4:	90 95       	com	r25
    22a6:	8e 0f       	add	r24, r30
    22a8:	9f 1f       	adc	r25, r31
    22aa:	08 95       	ret

000022ac <strnlen>:
    22ac:	fc 01       	movw	r30, r24
    22ae:	61 50       	subi	r22, 0x01	; 1
    22b0:	70 40       	sbci	r23, 0x00	; 0
    22b2:	01 90       	ld	r0, Z+
    22b4:	01 10       	cpse	r0, r1
    22b6:	d8 f7       	brcc	.-10     	; 0x22ae <strnlen+0x2>
    22b8:	80 95       	com	r24
    22ba:	90 95       	com	r25
    22bc:	8e 0f       	add	r24, r30
    22be:	9f 1f       	adc	r25, r31
    22c0:	08 95       	ret

000022c2 <fputc>:
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	fb 01       	movw	r30, r22
    22cc:	23 81       	ldd	r18, Z+3	; 0x03
    22ce:	21 fd       	sbrc	r18, 1
    22d0:	03 c0       	rjmp	.+6      	; 0x22d8 <fputc+0x16>
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	9f ef       	ldi	r25, 0xFF	; 255
    22d6:	2c c0       	rjmp	.+88     	; 0x2330 <fputc+0x6e>
    22d8:	22 ff       	sbrs	r18, 2
    22da:	16 c0       	rjmp	.+44     	; 0x2308 <fputc+0x46>
    22dc:	46 81       	ldd	r20, Z+6	; 0x06
    22de:	57 81       	ldd	r21, Z+7	; 0x07
    22e0:	24 81       	ldd	r18, Z+4	; 0x04
    22e2:	35 81       	ldd	r19, Z+5	; 0x05
    22e4:	42 17       	cp	r20, r18
    22e6:	53 07       	cpc	r21, r19
    22e8:	44 f4       	brge	.+16     	; 0x22fa <fputc+0x38>
    22ea:	a0 81       	ld	r26, Z
    22ec:	b1 81       	ldd	r27, Z+1	; 0x01
    22ee:	9d 01       	movw	r18, r26
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	31 83       	std	Z+1, r19	; 0x01
    22f6:	20 83       	st	Z, r18
    22f8:	8c 93       	st	X, r24
    22fa:	26 81       	ldd	r18, Z+6	; 0x06
    22fc:	37 81       	ldd	r19, Z+7	; 0x07
    22fe:	2f 5f       	subi	r18, 0xFF	; 255
    2300:	3f 4f       	sbci	r19, 0xFF	; 255
    2302:	37 83       	std	Z+7, r19	; 0x07
    2304:	26 83       	std	Z+6, r18	; 0x06
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <fputc+0x6e>
    2308:	8b 01       	movw	r16, r22
    230a:	ec 01       	movw	r28, r24
    230c:	fb 01       	movw	r30, r22
    230e:	00 84       	ldd	r0, Z+8	; 0x08
    2310:	f1 85       	ldd	r31, Z+9	; 0x09
    2312:	e0 2d       	mov	r30, r0
    2314:	09 95       	icall
    2316:	89 2b       	or	r24, r25
    2318:	e1 f6       	brne	.-72     	; 0x22d2 <fputc+0x10>
    231a:	d8 01       	movw	r26, r16
    231c:	16 96       	adiw	r26, 0x06	; 6
    231e:	8d 91       	ld	r24, X+
    2320:	9c 91       	ld	r25, X
    2322:	17 97       	sbiw	r26, 0x07	; 7
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	17 96       	adiw	r26, 0x07	; 7
    2328:	9c 93       	st	X, r25
    232a:	8e 93       	st	-X, r24
    232c:	16 97       	sbiw	r26, 0x06	; 6
    232e:	ce 01       	movw	r24, r28
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <__ultoa_invert>:
    233a:	fa 01       	movw	r30, r20
    233c:	aa 27       	eor	r26, r26
    233e:	28 30       	cpi	r18, 0x08	; 8
    2340:	51 f1       	breq	.+84     	; 0x2396 <__ultoa_invert+0x5c>
    2342:	20 31       	cpi	r18, 0x10	; 16
    2344:	81 f1       	breq	.+96     	; 0x23a6 <__ultoa_invert+0x6c>
    2346:	e8 94       	clt
    2348:	6f 93       	push	r22
    234a:	6e 7f       	andi	r22, 0xFE	; 254
    234c:	6e 5f       	subi	r22, 0xFE	; 254
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	af 4f       	sbci	r26, 0xFF	; 255
    2356:	b1 e0       	ldi	r27, 0x01	; 1
    2358:	3e d0       	rcall	.+124    	; 0x23d6 <__ultoa_invert+0x9c>
    235a:	b4 e0       	ldi	r27, 0x04	; 4
    235c:	3c d0       	rcall	.+120    	; 0x23d6 <__ultoa_invert+0x9c>
    235e:	67 0f       	add	r22, r23
    2360:	78 1f       	adc	r23, r24
    2362:	89 1f       	adc	r24, r25
    2364:	9a 1f       	adc	r25, r26
    2366:	a1 1d       	adc	r26, r1
    2368:	68 0f       	add	r22, r24
    236a:	79 1f       	adc	r23, r25
    236c:	8a 1f       	adc	r24, r26
    236e:	91 1d       	adc	r25, r1
    2370:	a1 1d       	adc	r26, r1
    2372:	6a 0f       	add	r22, r26
    2374:	71 1d       	adc	r23, r1
    2376:	81 1d       	adc	r24, r1
    2378:	91 1d       	adc	r25, r1
    237a:	a1 1d       	adc	r26, r1
    237c:	20 d0       	rcall	.+64     	; 0x23be <__ultoa_invert+0x84>
    237e:	09 f4       	brne	.+2      	; 0x2382 <__ultoa_invert+0x48>
    2380:	68 94       	set
    2382:	3f 91       	pop	r19
    2384:	2a e0       	ldi	r18, 0x0A	; 10
    2386:	26 9f       	mul	r18, r22
    2388:	11 24       	eor	r1, r1
    238a:	30 19       	sub	r19, r0
    238c:	30 5d       	subi	r19, 0xD0	; 208
    238e:	31 93       	st	Z+, r19
    2390:	de f6       	brtc	.-74     	; 0x2348 <__ultoa_invert+0xe>
    2392:	cf 01       	movw	r24, r30
    2394:	08 95       	ret
    2396:	46 2f       	mov	r20, r22
    2398:	47 70       	andi	r20, 0x07	; 7
    239a:	40 5d       	subi	r20, 0xD0	; 208
    239c:	41 93       	st	Z+, r20
    239e:	b3 e0       	ldi	r27, 0x03	; 3
    23a0:	0f d0       	rcall	.+30     	; 0x23c0 <__ultoa_invert+0x86>
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__ultoa_invert+0x5c>
    23a4:	f6 cf       	rjmp	.-20     	; 0x2392 <__ultoa_invert+0x58>
    23a6:	46 2f       	mov	r20, r22
    23a8:	4f 70       	andi	r20, 0x0F	; 15
    23aa:	40 5d       	subi	r20, 0xD0	; 208
    23ac:	4a 33       	cpi	r20, 0x3A	; 58
    23ae:	18 f0       	brcs	.+6      	; 0x23b6 <__ultoa_invert+0x7c>
    23b0:	49 5d       	subi	r20, 0xD9	; 217
    23b2:	31 fd       	sbrc	r19, 1
    23b4:	40 52       	subi	r20, 0x20	; 32
    23b6:	41 93       	st	Z+, r20
    23b8:	02 d0       	rcall	.+4      	; 0x23be <__ultoa_invert+0x84>
    23ba:	a9 f7       	brne	.-22     	; 0x23a6 <__ultoa_invert+0x6c>
    23bc:	ea cf       	rjmp	.-44     	; 0x2392 <__ultoa_invert+0x58>
    23be:	b4 e0       	ldi	r27, 0x04	; 4
    23c0:	a6 95       	lsr	r26
    23c2:	97 95       	ror	r25
    23c4:	87 95       	ror	r24
    23c6:	77 95       	ror	r23
    23c8:	67 95       	ror	r22
    23ca:	ba 95       	dec	r27
    23cc:	c9 f7       	brne	.-14     	; 0x23c0 <__ultoa_invert+0x86>
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	61 05       	cpc	r22, r1
    23d2:	71 05       	cpc	r23, r1
    23d4:	08 95       	ret
    23d6:	9b 01       	movw	r18, r22
    23d8:	ac 01       	movw	r20, r24
    23da:	0a 2e       	mov	r0, r26
    23dc:	06 94       	lsr	r0
    23de:	57 95       	ror	r21
    23e0:	47 95       	ror	r20
    23e2:	37 95       	ror	r19
    23e4:	27 95       	ror	r18
    23e6:	ba 95       	dec	r27
    23e8:	c9 f7       	brne	.-14     	; 0x23dc <__ultoa_invert+0xa2>
    23ea:	62 0f       	add	r22, r18
    23ec:	73 1f       	adc	r23, r19
    23ee:	84 1f       	adc	r24, r20
    23f0:	95 1f       	adc	r25, r21
    23f2:	a0 1d       	adc	r26, r0
    23f4:	08 95       	ret

000023f6 <__divmodsi4>:
    23f6:	05 2e       	mov	r0, r21
    23f8:	97 fb       	bst	r25, 7
    23fa:	1e f4       	brtc	.+6      	; 0x2402 <__divmodsi4+0xc>
    23fc:	00 94       	com	r0
    23fe:	0e 94 12 12 	call	0x2424	; 0x2424 <__negsi2>
    2402:	57 fd       	sbrc	r21, 7
    2404:	07 d0       	rcall	.+14     	; 0x2414 <__divmodsi4_neg2>
    2406:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__udivmodsi4>
    240a:	07 fc       	sbrc	r0, 7
    240c:	03 d0       	rcall	.+6      	; 0x2414 <__divmodsi4_neg2>
    240e:	4e f4       	brtc	.+18     	; 0x2422 <__divmodsi4_exit>
    2410:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__negsi2>

00002414 <__divmodsi4_neg2>:
    2414:	50 95       	com	r21
    2416:	40 95       	com	r20
    2418:	30 95       	com	r19
    241a:	21 95       	neg	r18
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	4f 4f       	sbci	r20, 0xFF	; 255
    2420:	5f 4f       	sbci	r21, 0xFF	; 255

00002422 <__divmodsi4_exit>:
    2422:	08 95       	ret

00002424 <__negsi2>:
    2424:	90 95       	com	r25
    2426:	80 95       	com	r24
    2428:	70 95       	com	r23
    242a:	61 95       	neg	r22
    242c:	7f 4f       	sbci	r23, 0xFF	; 255
    242e:	8f 4f       	sbci	r24, 0xFF	; 255
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	08 95       	ret

00002434 <__muluhisi3>:
    2434:	0e 94 86 12 	call	0x250c	; 0x250c <__umulhisi3>
    2438:	a5 9f       	mul	r26, r21
    243a:	90 0d       	add	r25, r0
    243c:	b4 9f       	mul	r27, r20
    243e:	90 0d       	add	r25, r0
    2440:	a4 9f       	mul	r26, r20
    2442:	80 0d       	add	r24, r0
    2444:	91 1d       	adc	r25, r1
    2446:	11 24       	eor	r1, r1
    2448:	08 95       	ret

0000244a <__mulshisi3>:
    244a:	b7 ff       	sbrs	r27, 7
    244c:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__muluhisi3>

00002450 <__mulohisi3>:
    2450:	0e 94 1a 12 	call	0x2434	; 0x2434 <__muluhisi3>
    2454:	82 1b       	sub	r24, r18
    2456:	93 0b       	sbc	r25, r19
    2458:	08 95       	ret

0000245a <__prologue_saves__>:
    245a:	2f 92       	push	r2
    245c:	3f 92       	push	r3
    245e:	4f 92       	push	r4
    2460:	5f 92       	push	r5
    2462:	6f 92       	push	r6
    2464:	7f 92       	push	r7
    2466:	8f 92       	push	r8
    2468:	9f 92       	push	r9
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	ca 1b       	sub	r28, r26
    2484:	db 0b       	sbc	r29, r27
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	09 94       	ijmp

00002492 <__epilogue_restores__>:
    2492:	2a 88       	ldd	r2, Y+18	; 0x12
    2494:	39 88       	ldd	r3, Y+17	; 0x11
    2496:	48 88       	ldd	r4, Y+16	; 0x10
    2498:	5f 84       	ldd	r5, Y+15	; 0x0f
    249a:	6e 84       	ldd	r6, Y+14	; 0x0e
    249c:	7d 84       	ldd	r7, Y+13	; 0x0d
    249e:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a4:	b9 84       	ldd	r11, Y+9	; 0x09
    24a6:	c8 84       	ldd	r12, Y+8	; 0x08
    24a8:	df 80       	ldd	r13, Y+7	; 0x07
    24aa:	ee 80       	ldd	r14, Y+6	; 0x06
    24ac:	fd 80       	ldd	r15, Y+5	; 0x05
    24ae:	0c 81       	ldd	r16, Y+4	; 0x04
    24b0:	1b 81       	ldd	r17, Y+3	; 0x03
    24b2:	aa 81       	ldd	r26, Y+2	; 0x02
    24b4:	b9 81       	ldd	r27, Y+1	; 0x01
    24b6:	ce 0f       	add	r28, r30
    24b8:	d1 1d       	adc	r29, r1
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	ed 01       	movw	r28, r26
    24c6:	08 95       	ret

000024c8 <__udivmodsi4>:
    24c8:	a1 e2       	ldi	r26, 0x21	; 33
    24ca:	1a 2e       	mov	r1, r26
    24cc:	aa 1b       	sub	r26, r26
    24ce:	bb 1b       	sub	r27, r27
    24d0:	fd 01       	movw	r30, r26
    24d2:	0d c0       	rjmp	.+26     	; 0x24ee <__udivmodsi4_ep>

000024d4 <__udivmodsi4_loop>:
    24d4:	aa 1f       	adc	r26, r26
    24d6:	bb 1f       	adc	r27, r27
    24d8:	ee 1f       	adc	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	a2 17       	cp	r26, r18
    24de:	b3 07       	cpc	r27, r19
    24e0:	e4 07       	cpc	r30, r20
    24e2:	f5 07       	cpc	r31, r21
    24e4:	20 f0       	brcs	.+8      	; 0x24ee <__udivmodsi4_ep>
    24e6:	a2 1b       	sub	r26, r18
    24e8:	b3 0b       	sbc	r27, r19
    24ea:	e4 0b       	sbc	r30, r20
    24ec:	f5 0b       	sbc	r31, r21

000024ee <__udivmodsi4_ep>:
    24ee:	66 1f       	adc	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	88 1f       	adc	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	1a 94       	dec	r1
    24f8:	69 f7       	brne	.-38     	; 0x24d4 <__udivmodsi4_loop>
    24fa:	60 95       	com	r22
    24fc:	70 95       	com	r23
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	9b 01       	movw	r18, r22
    2504:	ac 01       	movw	r20, r24
    2506:	bd 01       	movw	r22, r26
    2508:	cf 01       	movw	r24, r30
    250a:	08 95       	ret

0000250c <__umulhisi3>:
    250c:	a2 9f       	mul	r26, r18
    250e:	b0 01       	movw	r22, r0
    2510:	b3 9f       	mul	r27, r19
    2512:	c0 01       	movw	r24, r0
    2514:	a3 9f       	mul	r26, r19
    2516:	70 0d       	add	r23, r0
    2518:	81 1d       	adc	r24, r1
    251a:	11 24       	eor	r1, r1
    251c:	91 1d       	adc	r25, r1
    251e:	b2 9f       	mul	r27, r18
    2520:	70 0d       	add	r23, r0
    2522:	81 1d       	adc	r24, r1
    2524:	11 24       	eor	r1, r1
    2526:	91 1d       	adc	r25, r1
    2528:	08 95       	ret

0000252a <__do_global_dtors>:
    252a:	10 e0       	ldi	r17, 0x00	; 0
    252c:	c5 e3       	ldi	r28, 0x35	; 53
    252e:	d0 e0       	ldi	r29, 0x00	; 0
    2530:	04 c0       	rjmp	.+8      	; 0x253a <__do_global_dtors+0x10>
    2532:	fe 01       	movw	r30, r28
    2534:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__tablejump2__>
    2538:	21 96       	adiw	r28, 0x01	; 1
    253a:	c6 33       	cpi	r28, 0x36	; 54
    253c:	d1 07       	cpc	r29, r17
    253e:	c9 f7       	brne	.-14     	; 0x2532 <__do_global_dtors+0x8>
    2540:	f8 94       	cli

00002542 <__stop_program>:
    2542:	ff cf       	rjmp	.-2      	; 0x2542 <__stop_program>
